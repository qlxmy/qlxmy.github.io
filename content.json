{"meta":{"title":"xmy's house","subtitle":"Build by xmy","description":"我见青山多妩媚，料青山见我应如是","author":"小蚂蚁的小窝","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2020-01-10T07:43:48.000Z","updated":"2020-01-13T09:08:31.714Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"继续折腾我的博客(^o^)/"},{"title":"categories","date":"2020-01-10T07:43:16.000Z","updated":"2020-01-13T09:08:51.943Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-10T07:42:50.000Z","updated":"2020-01-13T09:09:05.153Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Access注入","slug":"Access注入","date":"2020-01-13T08:58:44.000Z","updated":"2020-01-13T09:02:17.237Z","comments":true,"path":"2020/01/13/Access注入/","link":"","permalink":"http://yoursite.com/2020/01/13/Access%E6%B3%A8%E5%85%A5/","excerpt":"1 Access的一些特性Access的一些特性如下：●Aceess通常搭配ASP网站；●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。●Access数据库没有用户名和密码，也没有数据库名。 2 Access手工注入Access注入的步骤通常如下：（1）.判断注入点（2）.猜解表名（3）.猜解列名（4）.猜解内容 2.1 判断注入点判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。 2.2 猜解表名Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下： and exists(select * from 表名) 如果返回正常，说明数据库中有这个表。猜解是否有user表：显示出错，说明没有user表。猜解是否有admin表：很明显，有admin这个表。","text":"1 Access的一些特性Access的一些特性如下：●Aceess通常搭配ASP网站；●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。●Access数据库没有用户名和密码，也没有数据库名。 2 Access手工注入Access注入的步骤通常如下：（1）.判断注入点（2）.猜解表名（3）.猜解列名（4）.猜解内容 2.1 判断注入点判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。 2.2 猜解表名Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下： and exists(select * from 表名) 如果返回正常，说明数据库中有这个表。猜解是否有user表：显示出错，说明没有user表。猜解是否有admin表：很明显，有admin这个表。 2.3 猜解列名列名的猜解和表名一样，也是用exists函数。语句如下： and exists(select 列名 from 表名) 返回正常，则说明有这个列。。猜解是否有admin列：猜解是否有password列： 2.4 猜解列的长度猜解列的长度需要用到len函数，语句如下： and (select top 1 len(列名) from 表名)>num num是数字，可以是1，2，3……直到页面返回出错为止，则该值就是列的长度。这个语句只能猜解第一条记录的长度。 猜解admin列第一条记录的长度：admin列第一条记录的长度是5。 2.5 猜解列的内容猜解列的内容用到两个函数mid和asc，mid(列名, N, 1)函数发截取第N位字符，asc(mid(列名, N, 1))函数取得第N位字符ascii码，ascii码对应的字符就是我们猜解出来的内容。语句如下： and select top 1 asc(mid(列名, N, 1) from 表名)>num num是ascii码，直到页面返回出错，则该值就是对应位置字符的ascii码。猜解admin列第一条记录的第一个字符：由上面可知，admin列第一个值第一个字符对应的ascii码是97，则该字符为“a”，接下来的字符猜解方法是一样的。 2.6 union查询上面的方法在猜解列的内容时是十分麻烦的，我们可以使用union使猜解变得简单起来。union是针对两个表的联合查询，使用union时两个表的列数和数据类型必须完全一致才能进行查询。下面用实例说话，我们猜解当前表的列数，使用order by语句： order by num num是列的数量，直到页面返回不正常，那上一个正常的返回值就是列数。返回错误，由此可知当前表的列数是5。使用union也可以猜解当前表的列数，语句是： and 1=2 union select 1,2,3…N from 表名 使用and 1=2使第一条查询语句出错，union执行第二条查询语句，n是列数，由1，2，3一直往上加，直到页面出现数字为止。这里需要注意的是，后面的表名不是当前表的表名，而是你需要猜解的表名，而猜解出来的列数却是当前表的列数。从图中我们可以看到2和3这两个数字，这表示它显示的是当前表的第2列和第3列的查询结果。我们利用上面得到的数字来进行暴表，语句如下： And 1=2 union select 1,列1,列2,3,4,5 from 表名 看图，我们成功地将admin和password这两列的第一条记录暴出来了，是不是比上面使用的方法简单多了。","categories":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":".htaccess绕过黑名单上传","slug":"htaccess绕过黑名单上传","date":"2020-01-11T10:35:58.000Z","updated":"2020-01-13T07:50:00.095Z","comments":true,"path":"2020/01/11/htaccess绕过黑名单上传/","link":"","permalink":"http://yoursite.com/2020/01/11/htaccess%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%8A%E4%BC%A0/","excerpt":".htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。[1]在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。 测试上传功能的代码如下： &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;&gt; &lt;/form&gt; &lt;?php $black_list = array(&#39;html&#39;, &#39;htm&#39;, &#39;php&#39;, &#39;php2&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;txt&#39;); if(isset($_FILES[&#39;file&#39;])) { $file_name = $_FILES[&#39;file&#39;][&#39;name&#39;]; $file_path = &#39;images/&#39; . $file_name; $file_ext = substr($file_name, strrpos($file_name, &#39;.&#39;)+1); $file_tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;]; foreach($black_list as $key=&gt;$value) { if($value == strtolower($file_ext)) { echo &quot;不允许上传的文件类型！&quot;; exit(0); } } if(!move_uploaded_file($file_tmp, $file_path)) { echo &quot;文件上传失败！&quot;; } else { echo &quot;文件上传成功，文件路径为&quot; . $file_path; } } ?&gt;新建.htaccess文件内容如下： &lt;FilesMatch &quot;lala&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：两个文件都能上传成功，使用菜刀连接lala文件：所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。 参考：[1]百度百科：https://baike.baidu.com/item/htaccess/1645473","text":".htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。[1]在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。 测试上传功能的代码如下： &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;&gt; &lt;/form&gt; &lt;?php $black_list = array(&#39;html&#39;, &#39;htm&#39;, &#39;php&#39;, &#39;php2&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;txt&#39;); if(isset($_FILES[&#39;file&#39;])) { $file_name = $_FILES[&#39;file&#39;][&#39;name&#39;]; $file_path = &#39;images/&#39; . $file_name; $file_ext = substr($file_name, strrpos($file_name, &#39;.&#39;)+1); $file_tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;]; foreach($black_list as $key=&gt;$value) { if($value == strtolower($file_ext)) { echo &quot;不允许上传的文件类型！&quot;; exit(0); } } if(!move_uploaded_file($file_tmp, $file_path)) { echo &quot;文件上传失败！&quot;; } else { echo &quot;文件上传成功，文件路径为&quot; . $file_path; } } ?&gt;新建.htaccess文件内容如下： &lt;FilesMatch &quot;lala&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：两个文件都能上传成功，使用菜刀连接lala文件：所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。 参考：[1]百度百科：https://baike.baidu.com/item/htaccess/1645473","categories":[{"name":"文件上传","slug":"文件上传","permalink":"http://yoursite.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-11T07:54:24.958Z","updated":"2020-01-10T07:21:15.000Z","comments":true,"path":"2020/01/11/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/11/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}