{"meta":{"title":"xmy's house","subtitle":"Build by xmy","description":"我见青山多妩媚，料青山见我应如是","author":"小蚂蚁的小窝","url":"http://yoursite.com","root":"/"},"pages":[{"title":"关于","date":"2020-01-10T07:43:48.000Z","updated":"2020-01-13T09:08:31.714Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"继续折腾我的博客(^o^)/"},{"title":"categories","date":"2020-01-10T07:43:16.000Z","updated":"2020-01-13T09:08:51.943Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-10T07:42:50.000Z","updated":"2020-01-13T09:09:05.153Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"MySQL注入","slug":"MySQL注入","date":"2020-01-13T09:31:17.000Z","updated":"2020-01-13T10:33:43.357Z","comments":true,"path":"2020/01/13/MySQL注入/","link":"","permalink":"http://yoursite.com/2020/01/13/MySQL%E6%B3%A8%E5%85%A5/","excerpt":"MySQL的一些特性MySQL的注入比Access好玩得多，这是基于MySQL的特性而定的。看一下MySQL的一些特性：●MySQL通常搭配PHP使用，所以PHP的网站一般都是使用MySQL数据库；●MySQL的数据库文件通常存储在数据库安装路径下，后缀格式是myi，myd，frm；●MySQL有管理员用户名和密码，超级用户是root；●MySQL 5.0以上版本有information_schema数据库，存储着所有数据库下的表名和列名信息。MySQL可以使用和Access一样的猜解方法，但我们通常不会这样做，因为MySQL可以暴力破解数据库的很多信息。 判断注入点判断注入点需要具体情况具体分析，这里不做介绍。在这里使用我自己写的一个页面来演示。注入点是：http://localhost/test/injection.php?id=1 判断当前数据表列数使用order by语句来判断当前数据表的列数，语句如下： order by N N是1，2，3…N，直到页面返回出错，那前面一个数字就是当前数据表的列数。判断当前数据表的列数：当前数据表的列数是7。我们也可以使用union语句来判断当前数据表的列数，语句如下： and 1=2 union select 1,2,3… 一直增加数字，返回的页面都是出错的，直到返回的页面看到一些数字为止：我们可以看到2，5，6这三个奇怪的数字，这三个数字接下来很有用处。","text":"MySQL的一些特性MySQL的注入比Access好玩得多，这是基于MySQL的特性而定的。看一下MySQL的一些特性：●MySQL通常搭配PHP使用，所以PHP的网站一般都是使用MySQL数据库；●MySQL的数据库文件通常存储在数据库安装路径下，后缀格式是myi，myd，frm；●MySQL有管理员用户名和密码，超级用户是root；●MySQL 5.0以上版本有information_schema数据库，存储着所有数据库下的表名和列名信息。MySQL可以使用和Access一样的猜解方法，但我们通常不会这样做，因为MySQL可以暴力破解数据库的很多信息。 判断注入点判断注入点需要具体情况具体分析，这里不做介绍。在这里使用我自己写的一个页面来演示。注入点是：http://localhost/test/injection.php?id=1 判断当前数据表列数使用order by语句来判断当前数据表的列数，语句如下： order by N N是1，2，3…N，直到页面返回出错，那前面一个数字就是当前数据表的列数。判断当前数据表的列数：当前数据表的列数是7。我们也可以使用union语句来判断当前数据表的列数，语句如下： and 1=2 union select 1,2,3… 一直增加数字，返回的页面都是出错的，直到返回的页面看到一些数字为止：我们可以看到2，5，6这三个奇怪的数字，这三个数字接下来很有用处。 爆出MySQL的信息可以使用以下几个函数来爆出MySQL的一些信息： database() //爆出当前数据库名 version() //爆出数据库版本 user() //爆出当前用户 @@version_compile_os //爆出操作系统 使用的方法是将这些函数替换上面爆出来的一些数字，如下：我们可以看到，当前数据库名是bookinfo，用户是root，这是超级用户，操作系统是Windows。 爆出当前数据库的所有表爆出表和字段会用到information_schema这个数据库，语句如下： and 1=2 union select 1,group_concat(table_name),3,4,5,6,7 from information_schema.tables where table_schema=当前数据库名(编码) 这里使用了group_concat这个函数，表示返回所有的表；information_schema.tables记录了所有数据库下所有表的信息。需要注意的是table_schema代表数据库名，需要进行十六进制编码。爆出bookinfo这个数据库的所有表：可以看到显示出了4个表，分别是admin，lend，user和yx_books。 爆出列名信息我们可以爆出某个数据库的的所有列名信息，语句如下： and 1=2 union select 1, group_concat(column_name),3,4,5,6,7 from information_schema.columns where table_name=表名（编码） information_shcema.columns记录了所有列名的信息，我们只需要指定表名就可以查询出具体某个表的列名信息，注意这里的表名需要进行十六进制编码。爆出admin表的列名信息： 爆出数据库的内容爆出admin表的username和password这两列的内容，构造语句如下： and 1=2 union select 1,group_concat(username),3,4,group_concat(password),6,7 from admin 不使用group_concat()函数只能查询出第一条记录。查询结果如下： 读取文件信息如果存在注入点，而且当前用户是root，MySQL的注入会变得好玩很多，比如我们可以试着读取某些文件的内容。读取文件用到load_file()函数，这个函数必须使用文件的绝对路径，所以在使用时我们必须想办法知道想要读取文件的路径。文件读取的语句如下： and 1=2 union select 1,load_file(‘文件路径’),3,4,5,6,7 我们知道服务器的操作系统是Windows，试着读取hosts文件的内容：读取成功！注意路径的分隔符用的是“\\\\”，也可以使用“/”。但是不要使用“\\”，因为“\\”在编程里面常用于转义，后面接一些字符会出现问题。 写入文件信息我们还可以直接写入一句话代码，如果目录有写入权限的话。写入文件使用的是into outfile函数。写入文件时也需要知道网站的绝对路径，否则写进去也无法成功访问。写入的语句如下： and 1=2 union select 1,写入内容的十六进制编码，3,4,5,6,7 into outfile ‘写入文件路径’ 我们在“D:\\phpstudy\\www\\test”下写入php一句话木马： 页面报错了，不过实际上写入成功了。注意我们对php一句话的内容进行了十六进制编码，这样可以绕过一些防护软件或者转义限制。hack.php的内容如下： 然后就可以直接上菜刀了： 魔术引号问题root权限虽然可以使用load_file()和into outfile对文件进行读取和写入，但我们也会遇到无法读取和写入的情况。这些情况通常是由于对目录或者文件权限不够的原因引起的，但也有可能是魔术引号问题引起的。魔术引号通常是指magic_quotes_gpc开关，当开关打开时，所有的GET、POST和COOKIE请求的数据中的单引号（’）、双引号（”）、反斜线（\\）和NULL字符都会被自动加上一个反斜线进行转义，这和addslashes()函数的作用完全相同。魔术引号其实就是为了防止SQL注入而增加的功能。不过自PHP 5.4.0起这个功能就被移除了。我们演示一下这个功能吧。在php.ini中开启魔术引号：我们读取一下hosts文件的内容： 读不出来！为了方便，我把sql语句显示了出来。可以看到，前面加上了一个反斜线，导致路径出错了。解决魔术引号问题的办法就是编码，将路径进行编码，注意编码的路径是不带单引号的： 顺利读取出来了。所以在进行读取和写入时，最好都进行编码。","categories":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":"Access注入","slug":"Access注入","date":"2020-01-13T08:58:44.000Z","updated":"2020-01-13T09:26:53.757Z","comments":true,"path":"2020/01/13/Access注入/","link":"","permalink":"http://yoursite.com/2020/01/13/Access%E6%B3%A8%E5%85%A5/","excerpt":"Access的一些特性Access的一些特性如下：●Aceess通常搭配ASP网站；●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。●Access数据库没有用户名和密码，也没有数据库名。 Access手工注入Access注入的步骤通常如下：（1）.判断注入点（2）.猜解表名（3）.猜解列名（4）.猜解内容 判断注入点判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。 猜解表名Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下： and exists(select * from 表名) 如果返回正常，说明数据库中有这个表。猜解是否有user表：显示出错，说明没有user表。猜解是否有admin表：很明显，有admin这个表。","text":"Access的一些特性Access的一些特性如下：●Aceess通常搭配ASP网站；●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。●Access数据库没有用户名和密码，也没有数据库名。 Access手工注入Access注入的步骤通常如下：（1）.判断注入点（2）.猜解表名（3）.猜解列名（4）.猜解内容 判断注入点判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。 猜解表名Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下： and exists(select * from 表名) 如果返回正常，说明数据库中有这个表。猜解是否有user表：显示出错，说明没有user表。猜解是否有admin表：很明显，有admin这个表。 猜解列名列名的猜解和表名一样，也是用exists函数。语句如下： and exists(select 列名 from 表名) 返回正常，则说明有这个列。。猜解是否有admin列：猜解是否有password列： 猜解列的长度猜解列的长度需要用到len函数，语句如下： and (select top 1 len(列名) from 表名)>num num是数字，可以是1，2，3……直到页面返回出错为止，则该值就是列的长度。这个语句只能猜解第一条记录的长度。 猜解admin列第一条记录的长度：admin列第一条记录的长度是5。 猜解列的内容猜解列的内容用到两个函数mid和asc，mid(列名, N, 1)函数发截取第N位字符，asc(mid(列名, N, 1))函数取得第N位字符ascii码，ascii码对应的字符就是我们猜解出来的内容。语句如下： and select top 1 asc(mid(列名, N, 1) from 表名)>num num是ascii码，直到页面返回出错，则该值就是对应位置字符的ascii码。猜解admin列第一条记录的第一个字符：由上面可知，admin列第一个值第一个字符对应的ascii码是97，则该字符为“a”，接下来的字符猜解方法是一样的。 union查询上面的方法在猜解列的内容时是十分麻烦的，我们可以使用union使猜解变得简单起来。union是针对两个表的联合查询，使用union时两个表的列数和数据类型必须完全一致才能进行查询。下面用实例说话，我们猜解当前表的列数，使用order by语句： order by num num是列的数量，直到页面返回不正常，那上一个正常的返回值就是列数。返回错误，由此可知当前表的列数是5。使用union也可以猜解当前表的列数，语句是： and 1=2 union select 1,2,3…N from 表名 使用and 1=2使第一条查询语句出错，union执行第二条查询语句，n是列数，由1，2，3一直往上加，直到页面出现数字为止。这里需要注意的是，后面的表名不是当前表的表名，而是你需要猜解的表名，而猜解出来的列数却是当前表的列数。从图中我们可以看到2和3这两个数字，这表示它显示的是当前表的第2列和第3列的查询结果。我们利用上面得到的数字来进行暴表，语句如下： And 1=2 union select 1,列1,列2,3,4,5 from 表名 看图，我们成功地将admin和password这两列的第一条记录暴出来了，是不是比上面使用的方法简单多了。","categories":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://yoursite.com/categories/SQL%E6%B3%A8%E5%85%A5/"}],"tags":[{"name":"SQL注入","slug":"SQL注入","permalink":"http://yoursite.com/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":".htaccess绕过黑名单上传","slug":"htaccess绕过黑名单上传","date":"2020-01-11T10:35:58.000Z","updated":"2020-01-13T07:50:00.095Z","comments":true,"path":"2020/01/11/htaccess绕过黑名单上传/","link":"","permalink":"http://yoursite.com/2020/01/11/htaccess%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%8A%E4%BC%A0/","excerpt":".htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。[1]在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。 测试上传功能的代码如下： &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;&gt; &lt;/form&gt; &lt;?php $black_list = array(&#39;html&#39;, &#39;htm&#39;, &#39;php&#39;, &#39;php2&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;txt&#39;); if(isset($_FILES[&#39;file&#39;])) { $file_name = $_FILES[&#39;file&#39;][&#39;name&#39;]; $file_path = &#39;images/&#39; . $file_name; $file_ext = substr($file_name, strrpos($file_name, &#39;.&#39;)+1); $file_tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;]; foreach($black_list as $key=&gt;$value) { if($value == strtolower($file_ext)) { echo &quot;不允许上传的文件类型！&quot;; exit(0); } } if(!move_uploaded_file($file_tmp, $file_path)) { echo &quot;文件上传失败！&quot;; } else { echo &quot;文件上传成功，文件路径为&quot; . $file_path; } } ?&gt;新建.htaccess文件内容如下： &lt;FilesMatch &quot;lala&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：两个文件都能上传成功，使用菜刀连接lala文件：所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。 参考：[1]百度百科：https://baike.baidu.com/item/htaccess/1645473","text":".htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。[1]在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。 测试上传功能的代码如下： &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;&gt; &lt;/form&gt; &lt;?php $black_list = array(&#39;html&#39;, &#39;htm&#39;, &#39;php&#39;, &#39;php2&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;txt&#39;); if(isset($_FILES[&#39;file&#39;])) { $file_name = $_FILES[&#39;file&#39;][&#39;name&#39;]; $file_path = &#39;images/&#39; . $file_name; $file_ext = substr($file_name, strrpos($file_name, &#39;.&#39;)+1); $file_tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;]; foreach($black_list as $key=&gt;$value) { if($value == strtolower($file_ext)) { echo &quot;不允许上传的文件类型！&quot;; exit(0); } } if(!move_uploaded_file($file_tmp, $file_path)) { echo &quot;文件上传失败！&quot;; } else { echo &quot;文件上传成功，文件路径为&quot; . $file_path; } } ?&gt;新建.htaccess文件内容如下： &lt;FilesMatch &quot;lala&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：两个文件都能上传成功，使用菜刀连接lala文件：所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。 参考：[1]百度百科：https://baike.baidu.com/item/htaccess/1645473","categories":[{"name":"文件上传","slug":"文件上传","permalink":"http://yoursite.com/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}],"tags":[{"name":"文件上传","slug":"文件上传","permalink":"http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-11T07:54:24.958Z","updated":"2020-01-10T07:21:15.000Z","comments":true,"path":"2020/01/11/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/11/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}