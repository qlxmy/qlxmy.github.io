<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL注入</title>
    <url>/2020/01/13/MySQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="MySQL的一些特性"><a href="#MySQL的一些特性" class="headerlink" title="MySQL的一些特性"></a>MySQL的一些特性</h3><p>MySQL的注入比Access好玩得多，这是基于MySQL的特性而定的。看一下MySQL的一些特性：<br>●MySQL通常搭配PHP使用，所以PHP的网站一般都是使用MySQL数据库；<br>●MySQL的数据库文件通常存储在数据库安装路径下，后缀格式是myi，myd，frm；<br>●MySQL有管理员用户名和密码，超级用户是root；<br>●MySQL 5.0以上版本有information_schema数据库，存储着所有数据库下的表名和列名信息。<br>MySQL可以使用和Access一样的猜解方法，但我们通常不会这样做，因为MySQL可以暴力破解数据库的很多信息。</p>
<h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>判断注入点需要具体情况具体分析，这里不做介绍。在这里使用我自己写的一个页面来演示。注入点是：<a href="http://localhost/test/injection.php?id=1" target="_blank" rel="noopener">http://localhost/test/injection.php?id=1</a><br><img src="http://static.zybuluo.com/xmy2017/490m31t8kx00cccg0v4eqr74/1.png" alt="1.png-17kB"> </p>
<h3 id="判断当前数据表列数"><a href="#判断当前数据表列数" class="headerlink" title="判断当前数据表列数"></a>判断当前数据表列数</h3><p>使用order by语句来判断当前数据表的列数，语句如下：</p>
<pre><code>order by N</code></pre>

<p>N是1，2，3…N，直到页面返回出错，那前面一个数字就是当前数据表的列数。<br>判断当前数据表的列数：<br><img src="http://static.zybuluo.com/xmy2017/gteaqk3s6zfq4hkvlh9bkefa/2.png" alt="2.png-41.6kB"><br>当前数据表的列数是7。<br>我们也可以使用union语句来判断当前数据表的列数，语句如下：</p>
<pre><code>and 1=2 union select 1,2,3…</code></pre>

<p>一直增加数字，返回的页面都是出错的，直到返回的页面看到一些数字为止：<br><img src="http://static.zybuluo.com/xmy2017/9y80j21sfuvdg4u7jf496eoh/3.png" alt="3.png-17.1kB"><br>我们可以看到2，5，6这三个奇怪的数字，这三个数字接下来很有用处。</p>
<h3 id="爆出MySQL的信息"><a href="#爆出MySQL的信息" class="headerlink" title="爆出MySQL的信息"></a>爆出MySQL的信息</h3><p>可以使用以下几个函数来爆出MySQL的一些信息：</p>
<pre><code>
database()                //爆出当前数据库名
version()                    //爆出数据库版本
user()                    //爆出当前用户
@@version_compile_os    //爆出操作系统
</code></pre>

<p>使用的方法是将这些函数替换上面爆出来的一些数字，如下：<br><img src="http://static.zybuluo.com/xmy2017/zx54edpsrllnvv0p8n7eyefh/4.png" alt="4.png-21.2kB"><br>我们可以看到，当前数据库名是bookinfo，用户是root，这是超级用户，操作系统是Windows。</p>
<h3 id="爆出当前数据库的所有表"><a href="#爆出当前数据库的所有表" class="headerlink" title="爆出当前数据库的所有表"></a>爆出当前数据库的所有表</h3><p>爆出表和字段会用到information_schema这个数据库，语句如下：</p>
<pre><code>and 1=2 union select 1,group_concat(table_name),3,4,5,6,7 from information_schema.tables where table_schema=当前数据库名(编码)</code></pre>

<p>这里使用了group_concat这个函数，表示返回所有的表；information_schema.tables记录了所有数据库下所有表的信息。需要注意的是table_schema代表数据库名，需要进行十六进制编码。<br>爆出bookinfo这个数据库的所有表：<br><img src="http://static.zybuluo.com/xmy2017/jxfxsmvfosdbf70rtuyuq5yc/5.png" alt="5.png-23.6kB"><br>可以看到显示出了4个表，分别是admin，lend，user和yx_books。</p>
<h3 id="爆出列名信息"><a href="#爆出列名信息" class="headerlink" title="爆出列名信息"></a>爆出列名信息</h3><p>我们可以爆出某个数据库的的所有列名信息，语句如下：</p>
<pre><code>and 1=2 union select 1, group_concat(column_name),3,4,5,6,7 from information_schema.columns where table_name=表名（编码）</code></pre>

<p>information_shcema.columns记录了所有列名的信息，我们只需要指定表名就可以查询出具体某个表的列名信息，注意这里的表名需要进行十六进制编码。<br>爆出admin表的列名信息：<br><img src="http://static.zybuluo.com/xmy2017/4zgbd5p2qhnnnf179sldugdg/6.png" alt="6.png-25.4kB"></p>
<h3 id="爆出数据库的内容"><a href="#爆出数据库的内容" class="headerlink" title="爆出数据库的内容"></a>爆出数据库的内容</h3><p>爆出admin表的username和password这两列的内容，构造语句如下：</p>
<pre><code>and 1=2 union select 1,group_concat(username),3,4,group_concat(password),6,7 from admin</code></pre>

<p>不使用group_concat()函数只能查询出第一条记录。<br>查询结果如下：<br> <img src="http://static.zybuluo.com/xmy2017/v162v35b8slhbtza0v8h2d2d/7.png" alt="7.png-25.8kB"></p>
<h3 id="读取文件信息"><a href="#读取文件信息" class="headerlink" title="读取文件信息"></a>读取文件信息</h3><p>如果存在注入点，而且当前用户是root，MySQL的注入会变得好玩很多，比如我们可以试着读取某些文件的内容。读取文件用到load_file()函数，这个函数必须使用文件的绝对路径，所以在使用时我们必须想办法知道想要读取文件的路径。文件读取的语句如下：</p>
<pre><code>and 1=2 union select 1,load_file(‘文件路径’),3,4,5,6,7</code></pre>

<p>我们知道服务器的操作系统是Windows，试着读取hosts文件的内容：<br><img src="http://static.zybuluo.com/xmy2017/6ezasaqd49h23rzr85h2u134/8.png" alt="8.png-62.9kB"><br>读取成功！注意路径的分隔符用的是“\\”，也可以使用“/”。但是不要使用“\”，因为“\”在编程里面常用于转义，后面接一些字符会出现问题。</p>
<h3 id="写入文件信息"><a href="#写入文件信息" class="headerlink" title="写入文件信息"></a>写入文件信息</h3><p>我们还可以直接写入一句话代码，如果目录有写入权限的话。写入文件使用的是into outfile函数。写入文件时也需要知道网站的绝对路径，否则写进去也无法成功访问。写入的语句如下：</p>
<pre><code>and 1=2 union select 1,写入内容的十六进制编码，3,4,5,6,7 into outfile ‘写入文件路径’</code></pre>

<p>我们在“D:\phpstudy\www\test”下写入php一句话木马：<br> <img src="http://static.zybuluo.com/xmy2017/tzhtvlgr1jedp3taih44ojhk/9.png" alt="9.png-32.2kB"><br>页面报错了，不过实际上写入成功了。注意我们对php一句话的内容进行了十六进制编码，这样可以绕过一些防护软件或者转义限制。hack.php的内容如下：<br> <img src="http://static.zybuluo.com/xmy2017/h6dgkopiddcmrukdsycx7wy0/10.png" alt="10.png-4kB"><br>然后就可以直接上菜刀了：<br><img src="http://static.zybuluo.com/xmy2017/s41pwliitle1skeeej7t1a62/11.png" alt="11.png-43.2kB"></p>
<h3 id="魔术引号问题"><a href="#魔术引号问题" class="headerlink" title="魔术引号问题"></a>魔术引号问题</h3><p>root权限虽然可以使用load_file()和into outfile对文件进行读取和写入，但我们也会遇到无法读取和写入的情况。这些情况通常是由于对目录或者文件权限不够的原因引起的，但也有可能是魔术引号问题引起的。<br>魔术引号通常是指magic_quotes_gpc开关，当开关打开时，所有的GET、POST和COOKIE请求的数据中的单引号（’）、双引号（”）、反斜线（\）和NULL字符都会被自动加上一个反斜线进行转义，这和addslashes()函数的作用完全相同。魔术引号其实就是为了防止SQL注入而增加的功能。不过自PHP 5.4.0起这个功能就被移除了。<br>我们演示一下这个功能吧。在php.ini中开启魔术引号：<br><img src="http://static.zybuluo.com/xmy2017/fnugboqrpg7dnsua7vsjtv1u/12.png" alt="12.png-1.6kB"><br>我们读取一下hosts文件的内容：<br> <img src="http://static.zybuluo.com/xmy2017/v841j6cbzxyy7wr31zis6300/13.png" alt="13.png-55.3kB"><br>读不出来！为了方便，我把sql语句显示了出来。可以看到，前面加上了一个反斜线，导致路径出错了。<br>解决魔术引号问题的办法就是编码，将路径进行编码，注意编码的路径是不带单引号的：<br> <img src="http://static.zybuluo.com/xmy2017/g7l4npl403khne8t2v9a6lpf/14.png" alt="14.png-75.2kB"><br>顺利读取出来了。所以在进行读取和写入时，最好都进行编码。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Access注入</title>
    <url>/2020/01/13/Access%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="Access的一些特性"><a href="#Access的一些特性" class="headerlink" title="Access的一些特性"></a>Access的一些特性</h3><p>Access的一些特性如下：<br>●Aceess通常搭配ASP网站；<br>●Access的数据库文件存放在网站目录下（通常是database或者db目录），后缀格式通常是mdb（也可能是asp或者asa）。我们可以想办法下载数据库文件。<br>●Access数据库没有用户名和密码，也没有数据库名。</p>
<h3 id="Access手工注入"><a href="#Access手工注入" class="headerlink" title="Access手工注入"></a>Access手工注入</h3><p>Access注入的步骤通常如下：<br>（1）.判断注入点<br>（2）.猜解表名<br>（3）.猜解列名<br>（4）.猜解内容</p>
<h4 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h4><p>判断注入点有很多种方法，要根据具体情况使用，所以这里也不详细解释。</p>
<h4 id="猜解表名"><a href="#猜解表名" class="headerlink" title="猜解表名"></a>猜解表名</h4><p>Access的表名和列名都只能靠猜。表名的猜解使用exists函数，猜解语句如下：</p>
<pre><code>and exists(select * from 表名)</code></pre>

<p>如果返回正常，说明数据库中有这个表。<br>猜解是否有user表：<br><img src="http://static.zybuluo.com/xmy2017/vanlgelocnslo0ks81eiccog/1.png" alt="1.png-34.6kB"><br>显示出错，说明没有user表。<br>猜解是否有admin表：<br><img src="http://static.zybuluo.com/xmy2017/lrve5pbr4w72pwac8njkahkp/2.png" alt="2.png-291.2kB"><br>很明显，有admin这个表。</p>
<h4 id="猜解列名"><a href="#猜解列名" class="headerlink" title="猜解列名"></a>猜解列名</h4><p>列名的猜解和表名一样，也是用exists函数。语句如下：</p>
<pre><code>and exists(select 列名 from 表名)</code></pre>

<p>返回正常，则说明有这个列。。<br>猜解是否有admin列：<br><img src="http://static.zybuluo.com/xmy2017/wyziikcfo4yhk4qjhs1yjj17/3.png" alt="3.png-296.1kB"><br>猜解是否有password列：<br><img src="http://static.zybuluo.com/xmy2017/bxjo7kb22it921jat49dxg2i/4.png" alt="4.png-293.6kB"></p>
<h4 id="猜解列的长度"><a href="#猜解列的长度" class="headerlink" title="猜解列的长度"></a>猜解列的长度</h4><p>猜解列的长度需要用到len函数，语句如下：</p>
<pre><code>and (select top 1 len(列名) from 表名)>num</code></pre>

<p>num是数字，可以是1，2，3……直到页面返回出错为止，则该值就是列的长度。这个语句只能猜解第一条记录的长度。<br>　　猜解admin列第一条记录的长度：<br><img src="http://static.zybuluo.com/xmy2017/r5t8h26jrbyphhljsgnvc6is/5.png" alt="5.png-50.1kB"><br>admin列第一条记录的长度是5。</p>
<h4 id="猜解列的内容"><a href="#猜解列的内容" class="headerlink" title="猜解列的内容"></a>猜解列的内容</h4><p>猜解列的内容用到两个函数mid和asc，mid(列名, N, 1)函数发截取第N位字符，asc(mid(列名, N, 1))函数取得第N位字符ascii码，ascii码对应的字符就是我们猜解出来的内容。语句如下：</p>
<pre><code>and select top 1 asc(mid(列名, N, 1) from 表名)>num</code></pre>

<p>num是ascii码，直到页面返回出错，则该值就是对应位置字符的ascii码。<br>猜解admin列第一条记录的第一个字符：<br><img src="http://static.zybuluo.com/xmy2017/d3ctniqkkfmbl3nh6kfdcz7m/6.png" alt="6.png-46.3kB"><br>由上面可知，admin列第一个值第一个字符对应的ascii码是97，则该字符为“a”，接下来的字符猜解方法是一样的。</p>
<h4 id="union查询"><a href="#union查询" class="headerlink" title="union查询"></a>union查询</h4><p>上面的方法在猜解列的内容时是十分麻烦的，我们可以使用union使猜解变得简单起来。<br>union是针对两个表的联合查询，使用union时两个表的列数和数据类型必须完全一致才能进行查询。<br>下面用实例说话，我们猜解当前表的列数，使用order by语句：</p>
<pre><code>order by num</code></pre>

<p>num是列的数量，直到页面返回不正常，那上一个正常的返回值就是列数。<br><img src="http://static.zybuluo.com/xmy2017/7zn74u4eps3pupbye4nul9fr/7.png" alt="7.png-32kB"><br>返回错误，由此可知当前表的列数是5。<br>使用union也可以猜解当前表的列数，语句是：</p>
<pre><code>and 1=2 union select 1,2,3…N from 表名</code></pre>

<p>使用and 1=2使第一条查询语句出错，union执行第二条查询语句，n是列数，由1，2，3一直往上加，直到页面出现数字为止。这里需要注意的是，后面的表名不是当前表的表名，而是你需要猜解的表名，而猜解出来的列数却是当前表的列数。<br><img src="http://static.zybuluo.com/xmy2017/ywex8phxnhkksiozd6shzw5l/8.png" alt="8.png-35.1kB"><br>从图中我们可以看到2和3这两个数字，这表示它显示的是当前表的第2列和第3列的查询结果。<br>我们利用上面得到的数字来进行暴表，语句如下：</p>
<pre><code>And 1=2 union select 1,列1,列2,3,4,5 from 表名</code></pre>

<p><img src="http://static.zybuluo.com/xmy2017/5otmxx3jnwaanuundbmdi3u7/9.png" alt="9.png-41.4kB"><br>看图，我们成功地将admin和password这两列的第一条记录暴出来了，是不是比上面使用的方法简单多了。</p>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>.htaccess绕过黑名单上传</title>
    <url>/2020/01/11/htaccess%E7%BB%95%E8%BF%87%E9%BB%91%E5%90%8D%E5%8D%95%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>.htaccess文件(或者”分布式配置文件”）,全称是Hypertext Access(超文本入口)。提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。<sup>[1]</sup><br>在文件上传使用扩展名黑名单且没有过滤.htaccess的情况下，可以使用.htaccess文件绕过上传限制。</p>
<a id="more"></a>
<p>测试上传功能的代码如下：</p>
<pre><code>&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;form action=&quot;&quot; enctype=&quot;multipart/form-data&quot; method=&quot;POST&quot;&gt;
&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;
&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;upload&quot;&gt;
&lt;/form&gt;
&lt;?php 
$black_list = array(&#39;html&#39;, &#39;htm&#39;, &#39;php&#39;, &#39;php2&#39;, &#39;php3&#39;, &#39;php4&#39;, &#39;php5&#39;, &#39;phtml&#39;, &#39;txt&#39;);
if(isset($_FILES[&#39;file&#39;]))
{
    $file_name = $_FILES[&#39;file&#39;][&#39;name&#39;];
    $file_path = &#39;images/&#39; . $file_name;
    $file_ext = substr($file_name, strrpos($file_name, &#39;.&#39;)+1);
    $file_tmp = $_FILES[&#39;file&#39;][&#39;tmp_name&#39;];
    foreach($black_list as $key=&gt;$value)
    {
        if($value == strtolower($file_ext))
        {
            echo &quot;不允许上传的文件类型！&quot;;
            exit(0);
        }
    }

    if(!move_uploaded_file($file_tmp, $file_path))
    {
        echo &quot;文件上传失败！&quot;;
    }
    else
    {
        echo &quot;文件上传成功，文件路径为&quot; . $file_path;
    }
}
?&gt;</code></pre><p>新建.htaccess文件内容如下：</p>
<pre><code>&lt;FilesMatch &quot;lala&quot;&gt;
SetHandler application/x-httpd-php
&lt;/FilesMatch&gt;</code></pre><p>上传该文件，由于文件扩展名不在黑名单中，所以可以上传成功：<br><img src="http://static.zybuluo.com/xmy2017/01ud0mg1ecckbsmvfgh0kjzk/1.png" alt="1.png-24.9kB"><br>接着上传一个文件名包含“lala”且没有扩展名一句话木马文件：<br><img src="http://static.zybuluo.com/xmy2017/tcu7n64hghwlnjpjclc6xeug/2.png" alt="2.png-25.2kB"><br>两个文件都能上传成功，使用菜刀连接lala文件：<br><img src="http://static.zybuluo.com/xmy2017/jnt9ctkvkwl3e5g62yvlze1k/3.png" alt="3.png-75.3kB"><br>所以在使用黑名单过滤且未包含htaccess扩展名的情况下，.htaccess通常是个大杀器。</p>
<p>参考：<br>[1]百度百科：<a href="https://baike.baidu.com/item/htaccess/1645473" target="_blank" rel="noopener">https://baike.baidu.com/item/htaccess/1645473</a></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
